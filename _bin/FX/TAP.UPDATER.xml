<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TAP.UPDATER</name>
    </assembly>
    <members>
        <member name="T:TAP.UPDATER.Downloaders.HttpClientDownloader">
            <summary>
            An error-handler and user-friendly downloader class, used to download any file needed by the Auto-Updater through http.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Downloaders.HttpClientDownloader.HttpClient">
            <summary>
            The downloader client itself.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Downloaders.HttpClientDownloader.Hasher">
            <summary>
            The <c>IHasher</c> used to compute the hash of every downloaded file, if there is an expectedHash to compare it to.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Downloaders.HttpClientDownloader.BW">
            <summary>
            The <c>BackgroundWorker</c> used to inform the UI Thread of the current download's progress.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.#ctor(System.ComponentModel.BackgroundWorker,TAP.UPDATER.Hash.IHasher)">
            <summary>
            Initializes a new instance of the <c>HttpClientDownloader</c> class with the specified <c>BackgroundWorker</c> and with the specified <c>IHasher</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.DownloadDataToMemory(System.String,System.String)">
            <summary>
            This method tries to download a specific file (<c>address</c>) a pre-defined number of times (<c>DownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE</c>).
            If an expectedHash is used in this call, the hash of the downloaded file is compared to the expected hash received, triggering an InvalidDataException if they differ.
            It returns the downloaded content as a <c>byte[]</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.DefaultDownloadDataToMemory(System.String,System.String)">
            <summary>
            This method tries to download a specific file (<c>address</c>) a pre-defined number of times (<c>DownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE</c>).
            If an expectedHash is used in this call, the hash of the downloaded file is compared to the expected hash received, triggering an InvalidDataException if they differ.
            It returns the downloaded content as a <c>byte[]</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.DownloadDataToFile(System.String,System.String,System.String)">
            <summary>
            This method tries to download a specific file (<c>address</c>) a pre-defined number of times (<c>DownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE</c>).
            If an expectedHash is used in this call, the hash of the downloaded file is compared to the expected hash received, triggering an InvalidDataException if they differ.
            The downloaded content is saved in the disk, in the specified directory (filePath).
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.DownloadData(System.String,System.String,System.String)">
            <summary>
            This method tries to download a specific file (<c>address</c>) a pre-defined number of times (<c>DownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE</c>).
            It is also responsible for putting the BackgroundWorker Thread to sleep a pre-defined amount of time (<c>DownloaderConfigs.INTERVAL_MS_BETWEEN_DOWNLOAD_RETRIES</c>) between each download retry.
            It uses the Download method for that purpose, calling it with the received arguments.
            If no file path was received in argument (i.e., string.Empty), it waits for the returned Download's <c>Task</c> to finish before returning the downloaded content as an in-memory <c>byte[]</c>.
            If there is a file path specified (i.e., different from string.Empty), this method returns null after the Download is finished.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.DefaultDownloadData(System.String,System.String,System.String)">
            <summary>
            This method tries to download a specific file (<c>address</c>) a pre-defined number of times (<c>DownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE</c>).
            It is also responsible for putting the BackgroundWorker Thread to sleep a pre-defined amount of time (<c>DownloaderConfigs.INTERVAL_MS_BETWEEN_DOWNLOAD_RETRIES</c>) between each download retry.
            It uses the Download method for that purpose, calling it with the received arguments.
            If no file path was received in argument (i.e., string.Empty), it waits for the returned Download's <c>Task</c> to finish before returning the downloaded content as an in-memory <c>byte[]</c>.
            If there is a file path specified (i.e., different from string.Empty), this method returns null after the Download is finished.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.Download(System.String,System.String,System.String)">
            <summary>
            This method tries to download a specific file from a specific url (<c>address</c>).
            If no file path was received (i.e., file parameter is null), this method returns an in-memory byte[] with the downloaded file.
            If there is a file path in the parameter path, the download is performed directly into a file with the same name and relative path as the one in the address and this method returns null.
            If it completes the download and an expectedHash was received (i.e., the respective parameter isn't null), it checks if the hash of the downloaded file equals the expected hash of that same file (expectedHash), throwing an <c>InvalidDataException</c> if it doesn't.
            This method also logs the download progress to the respective progress bar through the BackgroundWorker (bw), whenever it assumes it is necessary.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.DefaultDownload(System.String,System.String,System.String)">
            <summary>
            This method tries to download a specific file from a specific url (<c>address</c>).
            If no file path was received (i.e., file parameter is null), this method returns an in-memory byte[] with the downloaded file.
            If there is a file path in the parameter path, the download is performed directly into a file with the same name and relative path as the one in the address and this method returns null.
            If it completes the download and an expectedHash was received (i.e., the respective parameter isn't null), it checks if the hash of the downloaded file equals the expected hash of that same file (expectedHash), throwing an <c>InvalidDataException</c> if it doesn't.
            This method also logs the download progress to the respective progress bar through the BackgroundWorker (bw), whenever it assumes it is necessary.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.RecalculateSpeedAverage(System.Single,System.Single)">
            <summary>
            Recalculates the average speed of the current download based on the new speed sample just measured.
            It weights the new speed sample using a previously defined ratio (DownloaderConfigs.SAMPLE_SPEED_WEIGHT).
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.HandleStatusCode(System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles the received status code of the HTTP request performed. This method is only called when the status code isn't a Success Status code.
            When the status code is a Server Error, the download flow is continued so that a retry is done, if the limit of retries hasn't yet been reached.
            When the status code isn't a Server Error, there is no point in retrying the Download, thus a <c>HttpRequestException</c> is trown - denied of a retry.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.SetupDefaultHeaders">
            <summary>
            Sets up the default headers of the HttpClient to be used when performing HTTP operations.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.ExceptionTypeShouldRetry(System.Exception)">
            <summary>
            This method returns true if the received exception is eligible for a retry, or false otherwise.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.HttpClientDownloader.ComputeNextSleepTime(System.Int32,System.Int32)">
            <summary>
            This method calculates the next sleep time by multiplying the base sleep time (DownloaderConfigs.BASE_MS_SLEEP_TIME_BETWEEN_DOWNLOAD_RETRIES) by a random floating-point number in the interval [0, 1[.
            It then applies an exponential backoff strategy to the wait time.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Downloaders.IDownloader">
            <summary>
            This interface declares the calls that every downloader should at least implement.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.IDownloader.DownloadDataToMemory(System.String,System.String)">
            <summary>
            The Downloader API call to download a specific file (address) directly into memory.
            If an expectedHash is specfied, the downloaded file's hash is compared with this hash, throwing an InvalidDataException if they don't match.
            It returns the downloaded content as a <c>byte[]</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.IDownloader.DefaultDownloadDataToMemory(System.String,System.String)">
            <summary>
            The Downloader API call to download a specific file (address) directly into memory.
            If an expectedHash is specfied, the downloaded file's hash is compared with this hash, throwing an InvalidDataException if they don't match.
            It returns the downloaded content as a <c>byte[]</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Downloaders.IDownloader.DownloadDataToFile(System.String,System.String,System.String)">
            <summary>
            The Downloader API call to download a specific file (address) to the disk in the path specified by filePath.
            If an expectedHash is specfied, the downloaded file's hash is compared with this hash, throwing an InvalidDataException if they don't match.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Engine.IUpdateCheckEngine">
            <summary>
            This interface represents the engine with all its core logic behind the Auto-Updater.
            It contains the public API calls that an external application may access regarding it.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.IUpdateCheckEngine.Check">
            <summary>
            Performs the required steps in order to try to fully patch the client.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Engine.IPatcherEngine">
            <summary>
            This interface represents the engine with all its core logic behind the Auto-Updater.
            It contains the public API calls that an external application may access regarding it.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.IPatcherEngine.Patch">
            <summary>
            Performs the required steps in order to try to fully patch the client.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Engine.UpdateCheckEngine">
            <summary>
            A pipeline-action-based engine class, with all its core logic behind the Auto-Updater.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.LocalMetadata">
            <summary>
            The LocalMetadata stores the metadata obtained from the local files.
            It is stored in a thread-safe structure since it is going to be accessed concurrently.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.ServerMetadata">
            <summary>
            The ServerMetadata stores the metadata obtained from the server.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.BW">
            <summary>
            The <c>BackgroundWorker</c> instance, used to contact the UI Thread.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.Downloader">
            <summary>
            The <c>IDownloader</c>, used to download resources.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.Hasher">
            <summary>
            The <c>IHasher</c>, used to compute any hash operation whenever appropriate.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.PatchDirectory">
            <summary>
            The url to the actual server directory with the files.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.UpdateCheckEngine.Pipeline">
            <summary>
            A pipeline containing the steps to follow in order to try to guarantee a successful patch.
            Every action-step knows its relative order.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>PatcherEngine</c> class with the specified <c>BackgroundWorker</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.TAP#UPDATER#Engine#IUpdateCheckEngine#Check">
            <summary>
            Performs the required steps in order to try to fully patch the client.
            The time it takes for it to patch is measured through a <c>Stopwatch</c>.
            Every current step's description is outputted to the respective <c>Label</c> in the UI Thread through the BackgroundWorker.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.DownloadContent(System.Int32,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Invokes the <c>FileSystemExplorer</c> to try to download and write a list of specific files (content) to the disk.
            isMissingContent is true if the method is invoked as a mean to download missing content, or false if to download outdated content.
            After the downloads and writes are completed, the local metadata is refreshed.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.GenerateServerMetadata(System.Int32)">
            <summary>
            This method downloads the server's metadata file into memory.
            It then parses it, and stores its content in the ServerMetadata global variable.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.CalculateMissingContent">
            <summary>
            Returns a list containing the server files' names that are not present locally.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.CalculateOutdatedContent">
            <summary>
            Returns a list containing the server files' names which their hash differs from the respective local files' hash.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.GenerateLocalMetadata">
            <summary>
            Asks the FileSystemExplorer for a fresh copy of the local metadata performed in a concurrent way.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.DownloadMissingContent(System.Int32)">
            <summary>
            Invokes <c>CalculateMissingContent()</c> and then downloads the received list of missing files.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.DownloadOutdatedContent(System.Int32)">
            <summary>
            Invokes <c>CalculateOutdatedContent()</c> and then downloads the received list of outdated files.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.GetCurrentStepProgress(System.Int32)">
            <summary>
            Calculates the current progress percentage, based on the received step.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.LogDownloadingEvent(System.Int32,System.Boolean)">
            <summary>
            Informs the UI Thread that a specific type of download (missing content or outdated content) is taking progress, if that's the case.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.PerformLastSanityChecks">
            <summary>
            Checks if there are still any missing or outdated content after successfully applying the patch,
            throwing a new <c>FileNotFoundException</c> or <c>DataTamperedException</c> respectively if that's the case.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.UpdateCheckEngine.Finish(System.Diagnostics.Stopwatch)">
            <summary>
            Invokes <c>PerformLastSanityChecks()</c>, performing some last second sanity check, and stops the Stopwatch timer informing the UI Thread that the patch is completed.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Engine.PatcherEngine">
            <summary>
            A pipeline-action-based engine class, with all its core logic behind the Auto-Updater.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.LocalMetadata">
            <summary>
            The LocalMetadata stores the metadata obtained from the local files.
            It is stored in a thread-safe structure since it is going to be accessed concurrently.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.ServerMetadata">
            <summary>
            The ServerMetadata stores the metadata obtained from the server.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.BW">
            <summary>
            The <c>BackgroundWorker</c> instance, used to contact the UI Thread.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.Downloader">
            <summary>
            The <c>IDownloader</c>, used to download resources.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.Hasher">
            <summary>
            The <c>IHasher</c>, used to compute any hash operation whenever appropriate.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.PatchDirectory">
            <summary>
            The url to the actual server directory with the files.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Engine.PatcherEngine.Pipeline">
            <summary>
            A pipeline containing the steps to follow in order to try to guarantee a successful patch.
            Every action-step knows its relative order.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.#ctor(System.ComponentModel.BackgroundWorker)">
            <summary>
            Initializes a new instance of the <c>PatcherEngine</c> class with the specified <c>BackgroundWorker</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.TAP#UPDATER#Engine#IPatcherEngine#Patch">
            <summary>
            Performs the required steps in order to try to fully patch the client.
            The time it takes for it to patch is measured through a <c>Stopwatch</c>.
            Every current step's description is outputted to the respective <c>Label</c> in the UI Thread through the BackgroundWorker.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.DownloadContent(System.Int32,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Invokes the <c>FileSystemExplorer</c> to try to download and write a list of specific files (content) to the disk.
            isMissingContent is true if the method is invoked as a mean to download missing content, or false if to download outdated content.
            After the downloads and writes are completed, the local metadata is refreshed.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.GenerateServerMetadata(System.Int32)">
            <summary>
            This method downloads the server's metadata file into memory.
            It then parses it, and stores its content in the ServerMetadata global variable.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.CalculateMissingContent">
            <summary>
            Returns a list containing the server files' names that are not present locally.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.CalculateOutdatedContent">
            <summary>
            Returns a list containing the server files' names which their hash differs from the respective local files' hash.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.GenerateLocalMetadata">
            <summary>
            Asks the FileSystemExplorer for a fresh copy of the local metadata performed in a concurrent way.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.DownloadMissingContent(System.Int32)">
            <summary>
            Invokes <c>CalculateMissingContent()</c> and then downloads the received list of missing files.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.DownloadOutdatedContent(System.Int32)">
            <summary>
            Invokes <c>CalculateOutdatedContent()</c> and then downloads the received list of outdated files.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.GetCurrentStepProgress(System.Int32)">
            <summary>
            Calculates the current progress percentage, based on the received step.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.LogDownloadingEvent(System.Int32,System.Boolean)">
            <summary>
            Informs the UI Thread that a specific type of download (missing content or outdated content) is taking progress, if that's the case.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.PerformLastSanityChecks">
            <summary>
            Checks if there are still any missing or outdated content after successfully applying the patch,
            throwing a new <c>FileNotFoundException</c> or <c>DataTamperedException</c> respectively if that's the case.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Engine.PatcherEngine.Finish(System.Diagnostics.Stopwatch)">
            <summary>
            Invokes <c>PerformLastSanityChecks()</c>, performing some last second sanity check, and stops the Stopwatch timer informing the UI Thread that the patch is completed.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.ExceptionHandler.Exceptions.DataTamperedException">
            <summary>
            The exception that is thrown whenever an external entity tampered any data it shouldn't.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.ExceptionHandler.Exceptions.DataTamperedException.#ctor">
            <summary>
            Initializes a new instance of the <c>DataTamperedException</c> class.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.ExceptionHandler.Exceptions.DataTamperedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DataTamperedException</c> class with a specified error message.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.ExceptionHandler.Exceptions.DataTamperedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>DataTamperedException</c> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.ExceptionHandler.Handler">
            <summary>
            The class responsible for all exception handling during the patch.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.ExceptionHandler.Handler.Handle(System.Exception)">
            <summary>
            Handles the received <c>Exception</c> based on its type.
            Any un-cased exception triggers an unknown error prompt.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.ExceptionHandler.Handler.ShowError(System.String,System.String,System.String)">
            <summary>
            Informs the user, through a <c>MessageBox</c> (whose text and caption are received in arguments), that something went wrong while patching.
            Exits the application terminating all Threads after the user clicks in the OK button.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.ExceptionHandler.Handler.BuildErrorMessage(System.String,System.String)">
            <summary>
            Builds the error message displayed to the user through the <c>ShowError</c> method.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.FileSystem.FileMetadata">
            <summary>
            The class used to model the metadata of a file.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.FileSystem.FileMetadata.Filename">
            <summary>
            The file name of the file.
            </summary>
        </member>
        <member name="P:TAP.UPDATER.FileSystem.FileMetadata.Hash">
            <summary>
            The hash of the file.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.FileSystem.FileMetadata.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the class <c>FileMetadata</c>.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.FileSystem.FileSystemExplorer">
            <summary>
            The class responsible for any IO related task.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.FileSystem.FileSystemExplorer.GenerateLocalMetadata(System.String[],TAP.UPDATER.Hash.IHasher,System.Int32)">
            <summary>
            Returns a refreshed version of the local metadata.
            This method accomplishes this by reading from the disk all the files whose name match those in filePaths and calculating their hashes concurrently.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.FileSystem.FileSystemExplorer.FetchFile(TAP.UPDATER.Downloaders.IDownloader,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tries to download and write a specific file (resource) to the disk in a defined path.
            This method creates the respective parent directory, if needed.
            If the download is due to an update, this method downloads the updated file appending to it a special extension, preserving the legacy file.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.FileSystem.FileSystemExplorer.FileExists(System.String)">
            <summary>
            Checks if a file exists.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.FileSystem.FileSystemExplorer.ApplyUpdate(System.Collections.Generic.List{System.String})">
            <summary>
            This method is responsible for renaming all files updated by removing their special extension regarding their incompletion.
            It starts by checking if the downloaded files still exist in the disk. If any of them don't, it throws a <c>FileNotFoundException</c>.
            However, if all of them exist, the legacy version of each of them is deleted, and the updated version gets the respective legacy file name.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.FileSystem.IFileMetadata">
            <summary>
            Used to represent the metadata of a file.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Hash.IHasher">
            <summary>
            This interface declares the calls that every hasher should at least implement.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.IHasher.GeneratedHashFromByteArray(System.Byte[])">
            <summary>
            Computes the hash of the received <c>byte[]</c> array and returns it as a string.
            Invokes <c>NormalizeMd5()</c> for the conversion.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.IHasher.GeneratedHashFromStream(System.IO.Stream)">
            <summary>
            Computes the hash of the received <c>Stream</c> array and returns it as a string.
            Invokes <c>NormalizeMd5()</c> for the conversion.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.IHasher.GeneratedHashFromFile(System.String)">
            <summary>
            Computes the hash of the file with the received name and returns it as a string.
            Invokes <c>NormalizeMd5()</c> for the conversion.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Hash.Md5Hasher">
            <summary>
            The class used to generate and manipulate md5 hashes.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.Md5Hasher.GeneratedHashFromByteArray(System.Byte[])">
            <summary>
            Computes the md5 hash of the received <c>byte[]</c> array and returns it as a string.
            Invokes <c>NormalizeMd5()</c> for the conversion.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.Md5Hasher.GeneratedHashFromStream(System.IO.Stream)">
            <summary>
            Computes the md5 hash of the received <c>Stream</c> and returns it as a string.
            Invokes <c>NormalizeMd5()</c> for the conversion.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.Md5Hasher.GeneratedHashFromFile(System.String)">
            <summary>
            Computes the md5 hash of the file with the received name and returns it as a string.
            Invokes <c>NormalizeMd5()</c> for the conversion.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Hash.Md5Hasher.NormalizeMd5(System.Byte[])">
            <summary>
            Converts the <c>byte[]</c> md5 hash received into a string.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.UI.Patcher">
            <summary>
            The class with the entry point for the Auto-Updater.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.UI.Patcher.Main">
            <summary>
            The main entry point for the application.
            Only one application instance is allowed due to <c>Mutex</c> usage.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.UI.Wrappers.IWidgetWrapper">
            <summary>
            Used to represent a wrapper of a specific Widget.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.UI.Wrappers.LabelWrapper">
            <summary>
            The class used to model the wrapper of a <c>Label</c>.
            </summary>
        </member>
        <member name="P:TAP.UPDATER.UI.Wrappers.LabelWrapper.Label">
            <summary>
            The Label's representation as an enum
            </summary>
        </member>
        <member name="P:TAP.UPDATER.UI.Wrappers.LabelWrapper.Value">
            <summary>
            The text value of the Label.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.UI.Wrappers.LabelWrapper.#ctor(TAP.UPDATER.ProgressiveWidgetsEnum.Label,System.String)">
            <summary>
            Initializes a new instance of the <c>LabelWrapper</c> class with the specified <c>ProgressiveWidgetsEnum.Label</c> and value.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.UI.Wrappers.ProgressBarWrapper">
            <summary>
            The class used to model the wrapper of a <c>ProgressBar</c>.
            </summary>
        </member>
        <member name="P:TAP.UPDATER.UI.Wrappers.ProgressBarWrapper.ProgressBar">
            <summary>
            The ProgressBar's representation as an enum
            </summary>
        </member>
        <member name="P:TAP.UPDATER.UI.Wrappers.ProgressBarWrapper.Value">
            <summary>
            The progress percentage of the progress bar.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.UI.Wrappers.ProgressBarWrapper.#ctor(TAP.UPDATER.ProgressiveWidgetsEnum.ProgressBar,System.Int32)">
            <summary>
            Initializes a new instance of the <c>ProgressBarWrapper</c> class with the specified <c>ProgressiveWidgetsEnum.ProgressBar</c> and value.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs">
            <summary>
            The class with the required configuration to be used by the downloader.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE">
            <summary>
            The number of attempts to successfully download a file before throwing a specific Exception.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs.BASE_MS_SLEEP_TIME_BETWEEN_DOWNLOAD_RETRIES">
            <summary>
            The base time (in milliseconds) that the downloader will spend sleeping before retrying a failed download.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs.TIMEOUT_MS_WAITING_FOR_READ">
            <summary>
            The time (in milliseconds) that the downloader will spend waiting for the current read request to be completed before closing the stream by force, thus throwing an <c>ObjectDisposedException</c>.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs.BUFFER_SIZE">
            <summary>
            The downloader's buffer size, in bytes.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs.INFORM_PROGRESS_EVERY_X_READS">
            <summary>
            How many logs to the UI Thread will the downloader always omit between performed reads.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.CheckDownloaderConfigs.SAMPLE_SPEED_WEIGHT">
            <summary>
            The weight of a measured speed sample on the current file's average download speed.
            Use a value from the interval [0, 1].
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.Configs.FileSystemExplorerConfigs">
            <summary>
            The class with the required configuration to be used by the file system explorer.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.FileSystemExplorerConfigs.INCOMPLETE_DOWNLOADED_FILE_EXT">
            <summary>
            The extension given to files currently being downloaded to perform an update.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.Configs.EngineConfigs">
            <summary>
            The class with the required configuration to be used by the engine.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.EngineConfigs.PATCH_METADATA">
            <summary>
            The link to the server's metadata file.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.EngineConfigs.MS_TO_WAIT_FOR_AV_FALSE_POSITIVES">
            <summary>
            The time (in milliseconds) that the engine will spend sleeping before performing any consistency checks.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.Configs.DownloaderConfigs">
            <summary>
            The class with the required configuration to be used by the downloader.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.DownloaderConfigs.MAX_DOWNLOAD_RETRIES_PER_FILE">
            <summary>
            The number of attempts to successfully download a file before throwing a specific Exception.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.DownloaderConfigs.BASE_MS_SLEEP_TIME_BETWEEN_DOWNLOAD_RETRIES">
            <summary>
            The base time (in milliseconds) that the downloader will spend sleeping before retrying a failed download.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.DownloaderConfigs.TIMEOUT_MS_WAITING_FOR_READ">
            <summary>
            The time (in milliseconds) that the downloader will spend waiting for the current read request to be completed before closing the stream by force, thus throwing an <c>ObjectDisposedException</c>.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.DownloaderConfigs.BUFFER_SIZE">
            <summary>
            The downloader's buffer size, in bytes.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.DownloaderConfigs.INFORM_PROGRESS_EVERY_X_READS">
            <summary>
            How many logs to the UI Thread will the downloader always omit between performed reads.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.Configs.DownloaderConfigs.SAMPLE_SPEED_WEIGHT">
            <summary>
            The weight of a measured speed sample on the current file's average download speed.
            Use a value from the interval [0, 1].
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources">
            <summary>
            The class with the description of all handled runtime errors.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.ERROR_TITLE_AV">
            <summary>
            The title of the window triggered whenever there is a consistency error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.ERROR_TITLE_UNKNOWN">
            <summary>
            The title of the window triggered whenever there is an unknown error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.ERROR_TITLE_NETWORKING">
            <summary>
            The title of the window triggered whenever there is a network error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.ERROR_TITLE_EXPLORER">
            <summary>
            The title of the window triggered whenever there is an IO error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.UNKNOWN_ERROR">
            <summary>
            The text description of the window triggered whenever there is an unknown error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.TIMEOUT_DOWNLOADING_RESOURCE">
            <summary>
            The text description of the window triggered whenever there is a network error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.AV_FALSE_POSITIVE">
            <summary>
            The text description of the window triggered whenever there is a consistency error.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.ErrorHandlerResources.ERROR_IO_EXPLORER">
            <summary>
            The text description of the window triggered whenever there is an IO error.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.TextResources.DownloaderResources">
            <summary>
            The class with the description of all the downloader's text resources.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.DownloaderResources.DOWNLOAD_DATA">
            <summary>
            The text description of the current download speed.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.TextResources.MainWindowResources">
            <summary>
            The class with the text resources of all main window's textual fields.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.WEBSITE">
            <summary>
            Your main website.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.AUTHOR_WEBSITE">
            <summary>
            The author main website.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.CURRENT_VERSION">
            <summary>
            The current version of the Auto-Updater.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.MAIN_WINDOW_TITLE">
            <summary>
            The title of the main window.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.STARTER">
            <summary>
            Your client's launcher.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.ALREADY_RUNNING">
            <summary>
            The text description of the window triggered whenever there is already another instance of the Auto-Updater running.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.MainWindowResources.ALREADY_RUNNING_ERROR">
            <summary>
            The title of the window triggered whenever there is already another instance of the Auto-Updater running.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.TextResources.PatcherEngineResources">
            <summary>
            The class with the description of all the engine's steps and sub-steps.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.STEP">
            <summary>
            The text description of the current step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.CHECKING_OUTDATED_CONTENT">
            <summary>
            The text description of the "Checking for outdated content" step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.CHECKING_MISSING_CONTENT">
            <summary>
            The text description of the "Checking for missing content" step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.DOWNLOADING_OUTDATED_CONTENT">
            <summary>
            The text description of the "Downloading outdated content" step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.DOWNLOADING_MISSING_CONTENT">
            <summary>
            The text description of the "Downloading missing content" step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.GENERATING_LOCAL_METADATA">
            <summary>
            The text description of the "Analysing local metadata" step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.PARSING_SERVER_METADATA">
            <summary>
            The text description of the "Parsing server metadata" step.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.STARTING_DOWNLOADER_LOGGER">
            <summary>
            The text description that is used on the downloader label at start-up.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.FETCHING">
            <summary>
            The text description that is used on the downloader label while fetching server metadata.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.STARTING_MAIN_LOGGER">
            <summary>
            The text description that is used on the main logger label at start-up.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.FINISHED">
            <summary>
            The text description that is used on the general label when the Auto-Updater finished with success.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.ALL_FILES_ANALYZED">
            <summary>
            The text description that is used on the downloader label when the Auto-Updater finished with success.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.Resources.TextResources.PatcherEngineResources.FILE_COUNT">
            <summary>
            The text description that is used on the file count label when the Auto-Updater is downloading resources.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Resources.Utils">
            <summary>
            A class with various utilities, used throughout all the patch.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Resources.Utils.AggregateContainsSpecificException(System.AggregateException,System.Exception)">
            <summary>
            Checks if the received <c>AggregateException</c> contains at least one exception of the type of the exception received in the second parameter (another).
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Resources.Utils.Log(System.ComponentModel.BackgroundWorker,System.String,TAP.UPDATER.ProgressiveWidgetsEnum.Label)">
            <summary>
            Requests the UI Thread, through the BackgroundWorker (bw), to log the received message in the specified Label (label).
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Resources.Utils.Progress(System.ComponentModel.BackgroundWorker,System.Int32,TAP.UPDATER.ProgressiveWidgetsEnum.ProgressBar)">
            <summary>
            Requests the UI Thread, through the BackgroundWorker (bw), to log the received progress in the specified ProgressBar (progressBar).
            </summary>
        </member>
        <member name="M:TAP.UPDATER.Resources.Utils.BytesToString(System.Int64,System.Int32)">
            <summary>
            Converts a byte number into a more readable unit.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.ProgressiveWidgetsEnum">
            <summary>
            The class with the enums containing instances' descriptions of each used Widget.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.ProgressiveWidgetsEnum.Label">
            <summary>
            The enum containing instances' descriptions of each used <c>Label</c>.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.ProgressiveWidgetsEnum.Label.InformativeLogger">
            <summary>
            An instance description of the informative logger.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.ProgressiveWidgetsEnum.Label.DownloadLogger">
            <summary>
            An instance description of the downloader logger.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.ProgressiveWidgetsEnum.Label.FileCountLogger">
            <summary>
            An instance description of the file count logger.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.ProgressiveWidgetsEnum.Label.DownloadSpeedLogger">
            <summary>
            An instance description of the download speed logger.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.ProgressiveWidgetsEnum.ProgressBar">
            <summary>
            The enum containing instances' descriptions of each used <c>ProgressBar</c>.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.ProgressiveWidgetsEnum.ProgressBar.WholeProgressBar">
            <summary>
            An instance description of the whole progress bar.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.ProgressiveWidgetsEnum.ProgressBar.DownloadProgressBar">
            <summary>
            An instance description of the downloader progress bar.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.PatcherMainWindow">
            <summary>
            The class representing the main window and all its widgets' behaviour.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.#ctor">
            <summary>
            Initializes a new instance of the main window.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.BackgroundWorker1_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Deals with any ProgressChanged event trigger assuming the <c>ProgressChangedEventArgs</c>'s <c>UserState</c> is a <c>IWidgetWrapper</c>.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.setupWindowProperties">
            <summary>
            Sets up the initial main window properties.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.loadWindow(System.Object,System.EventArgs)">
            <summary>
            Loads the main window.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.starter_Click(System.Object,System.EventArgs)">
            <summary>
            Starts your client's launcher and exits the Auto-Updater when clicked.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.author_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Opens the author's website whenever the respective link is clicked.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.backgroundWorker1_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Supports all the engine's work in a non-UI Thread and assigns any un-handled exceptions to the Handler.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.backgroundWorker1_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Enables the starter button and displays a final message in the logger display.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.button1_Click(System.Object,System.EventArgs)">
            <summary>
            Opens your website whenever the respective button is clicked.
            </summary>
        </member>
        <member name="F:TAP.UPDATER.PatcherMainWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TAP.UPDATER.PatcherMainWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TAP.UPDATER.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:TAP.UPDATER.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:TAP.UPDATER.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:TAP.UPDATER.Properties.Resources.convert_32x32">
            <summary>
              System.Drawing.Bitmap 형식의 지역화된 리소스를 찾습니다.
            </summary>
        </member>
    </members>
</doc>
