<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TAP.Workflow.Factory</name>
    </assembly>
    <members>
        <member name="T:TAP.Workflow.Factory.FactoryWorkflow">
            <summary>
            This partial executes "REWORKIN" command. 
            </summary>
            <summary>
            This partial executes "REWORKOUT" command. 
            </summary>
            <summary>
            This is factory workflow class. This class execution workflow command.
            <para>
            If user want to use this class, user must adds refrences: TAP.App.Base, TAP.Base, TAP.Base.Configuration, TAP.Models, TAP.Models.Factories, TAP.Remoting.Server, TAP.Remoting.Server.BIZComponent, TAP.Workflow <br/>
            If user want to executes this class, user must assign service group name and service name in Workflowservice tag in APP config fille.
            </para>
            </summary>
            <summary>
            This partial executes "SCRAP" command. 
            </summary>
            <summary>
            Method "AddProduct" executes "ADD_PRODUCT" command.
            </summary>
            <summary>
            This partial execute "CREATE" command.
            </summary>
            <summary>
            This partial execute "FABOUT" command.
            </summary>
            <summary>
            Fast Track
            </summary>
            <summary>
            This parital execute "FORWARD" command.
            </summary>
            <summary>
            This partial execute "MOVE_IN" command (Move Operation). This command is exectued by LOT BASE ONLY.
            </summary>
            <summary>
            This partial execute "MOVE_IN_WITHOUTCASSETTE" command (Move Operation). 
            </summary>
            <summary>
            This parital execute "NG" command.
            </summary>
            <summary>
            This partial executes "SKIP" command. 
            </summary>
            <summary>
            This partial executes "MOVE_OUT_WITHOUTCASSETTE" command. 
            </summary>
            <summary>
            This partial execute "RECEIVE" command. 
            </summary>
            <summary>
            This partial executes "TRACKIN" command. 
            </summary>
            <summary>
            This partial executes "TRACKOUT" command. 
            </summary>
            <summary>
            This partial executes "MOVE_OUT" command. 
            </summary>
            <summary>
            This partial executes "ASSIGN_WORKORDER" command. 
            </summary>
            <summary>
            This partial executes "CHAGE_CASSETTE" command. 
            </summary>
            <summary>
            This partial executes "CHAGE_DEVICE" command. 
            </summary>
            <summary>
            This partial executes "CHAGE_STATUS" command. 
            </summary>
            <summary>
            This partial executes "HOLD" command. 
            </summary>
            <summary>
            This partial executes "MERGE" command. 
            </summary>
            <summary>
            This partial executes "RELEASE" command. 
            </summary>
            <summary>
            This partial executes "ROLLBACK" command. 
            </summary>
            <summary>
            This partial executes "SPLIT" command. 
            </summary>
            <summary>
            This partial executes "CREATE_BOX" command. 
            </summary>
            <summary>
            This partial executes "PACKAGE" command. 
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkInCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This methods executes "REWORKIN" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkInCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This methods executes "REWORKIN" command. 
            <para>This method requires taget main operation in argument (Argument names are same as: "[MAINOPEARTION]").</para>
            <para>
            This operation changes Rework state and Current Main Opeartion. but did not change current opeartion for "MOVE_OUT" <br/>
            </para>
            Final status of lot is "READY".
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkIn(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This methods executes "REWORKIN" command. 
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method checks lot status (Required status is "NG", "BUSY", "READY").</para>
            <para>Step3. This method exectues "REWORKIN" command (Refer to "LotReworkIn" method).</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotReworkIn(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method calls extensiom method for lot.</para>
            <para>Step2. This method calls extension method for product (In loop).</para>
            <para>Step3. This method changes process flow type and rework state of product (In loop).</para>
            <para>Step4. This method adds rework times of lot and changes process flow type and rework state of lot.</para>
            <para>Step5. This method changes lot satus.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkIn_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKIN" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkIn_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKIN" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkIn_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKIN" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkIn_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKIN" command, user can create extension code for additional product transaction using this method when customizing time.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOutCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This methods executes "REWORKOUT" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOutCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This methods executes "REWORKOUT" command. 
            <para>This method does not require any argument. </para>
            <para>
            User assign "MAINOPERATION" argument to this method optionally. If user did not assign "MAINOPERATION" argument, this method find last normal operation in lot history.<br/>
            This operation changes Rework state and Current Main Opeartion. but did not change current opeartion for "MOVE_OUT" <br/>
            </para>
            Final status of lot is "READY".
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOut(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "REWORKOUT" command. 
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method checks lot status (Required status is "BUSY").</para>
            <para>Step3. This method exectues "REWORKOUT" command (Refer to "LotReworkIn" method).</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotReworkOut(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method calls extensiom method for lot.</para>
            <para>Step2. This method calls extension method for product (In loop).</para>
            <para>Step3. This method calls extension method for product (In loop).</para>
            <para>Step4. This method changes process flow type and rework state of product (In loop).</para>
            <para>Step5. This method changes process flow type and rework state of lot.</para>
            <para>Step6. This method changes lot satus.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOut_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKOUT" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOut_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKOUT" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOut_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKOUT" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReworkOut_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "REWORKOUT" command, user can create extension code for additional product transaction using this method when customizing time.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.#ctor">
            <summary>
            This creates instance of this.
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.#ctor(System.String,System.String)">
            <summary>
            This creates instance of this.
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Initialize">
            <summary>
            This method initializes workflow
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommandForLot(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            This method execute command for Lot.
            </summary>
            <param name="lotID">Lot name</param>
            <param name="command">Command</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument values</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommandForProduct(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            This method execute command for prodct.
            </summary>
            <param name="Product">Product name</param>
            <param name="command">Command</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument values</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(TAP.Models.Model,System.String,System.String,System.String)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(TAP.Models.Model,System.String,System.String,System.String,System.String)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String,System.String)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(TAP.ArgumentPack,System.String,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="arguments">Arguments of command</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(System.Collections.Generic.List{TAP.ArgumentPack},System.String,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="arguments">Arguments of command</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(TAP.Models.Model,System.String,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="arguments">Arguments of command</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ExecuteCommand(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes requester's command
            </summary>
            <param name="model">BIZ Model</param>
            <param name="command">Command</param>
            <param name="requester">Equipment or Method</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="arguments">Arguments of command</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.GetNextStep(TAP.ArgumentPack,System.String,TAP.EnumFlagYN,System.String@)">
            <summary>
            This method get next operation for client
            </summary>
            <param name="model">BIZ Model</param>
            <param name="user">user</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.GetFirstOperation(TAP.ArgumentPack,System.String,TAP.EnumFlagYN,System.String@)">
            <summary>
            This method gets first operation of specified main opeartion
            </summary>
            <param name="model"></param>
            <param name="user"></param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DropCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "SCRAP" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DropCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "SCRAP" command. 
            <para>This method requires product list to scap (Argument names are same as: "[PRODUCT1],[PRODUCT2],[PRODUCT3],[PRODUCT4],[PRODUCT5]..."). </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Drop(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "SCRAP" command. 
            <para>This method requires product list to scap (Argument names are same as: "[PRODUCT1],[PRODUCT2],[PRODUCT3],[PRODUCT4],[PRODUCT5]..."). It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method execute "SCRAP" command (Refer to "DropLot" method or "DropProduct" method).</para>
            <para>Step3. This method calls extension method for additional transaction.</para>
            <para>Final status is "NG".</para>
            </summary>
            <param name="model">Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DropLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method creates lot. It works in the following way: 
            <para>Step1. This method checks if lot status (Required status is "READY", "WAIT", "NG" or "BUSY").</para>
            <para>Step2. This method changes "ISALIVE" flag of lot.</para>
            <para>Step3. This method calls extension method for lot.</para>
            <para>Step4. This method executes "SCRAP" command for product.</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DropProduct(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method creates lot. It works in the following way: 
            <para>Step1. This method checks if product status (Required status is "READY", "WAIT", "NG" or "BUSY").</para>
            <para>Step1. This method calls extension method for product.</para>
            <para>Step2. This method changes "ISALIVE" flag.</para>
            <para>Step3. This method changes product status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Drop_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "DROP" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Drop_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
             For "DROP" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Drop_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.Int32,System.String@)">
            <summary>
            For "DROP" command, user can create extension code for additional lot transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="index">Count of calling</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Drop_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.Int32,System.String@)">
            <summary>
            For "DROP" command, user can create extension code for additional product transaction using this method when customizing time.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="index">Count of calling</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProductCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method adds product to specified lot.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProductCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method adds product to specified lot.
            <para>This method requires product name list in argument (Argument names are same as: "[PRODUCT1],[PRODUCT2],[PRODUCT3],[PRODUCT4],[PRODUCT5]...").  </para>
            <para>
            <br/>
            </para>
            Final status of lot is "IN_MOVE".
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProduct(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method adds product to specified lot.
            <para>This method requires product name list in argument (Argument names are same as: "[PRODUCT1],[PRODUCT2],[PRODUCT3],[PRODUCT4],[PRODUCT5]..."). It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method validates Model. This method supports Lot only. </para>
            <para>Step3. This method loads Basic Informations: Device Basic Info and Operation Basic Info. </para>
            <para>Step4. This method validate number of product in lot.</para>
            <para>Step5. This method creates product ( Refer to "AddProduct_CreateProducts" Method).</para>
            <para>Step6. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "Track In Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProduct_CreateProducts(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.DeviceBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method creates product and adds product to lot. It works in the following way: 
            <para>Step1. This method calls extension method for lot. </para>
            <para>Step2. This method creates product using product name in argument (in loop). </para>
            <para>Step3. This method checks if product is included in ohter lot (in loop). </para>
            <para>Step4. This method checks if product is a duplicated (in loop). </para>
            <para>Step5. This method calls extension method for product. </para>
            <para>Step6. This method creates operation info and adds it to product (in loop). </para>
            <para>Step7. This method chages product status and adds it to lot (in loop). </para>
            <para>Step8. This method chages lot status. </para>
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="deviceBasic">Device Basic information</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Lot Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProduct_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.DeviceBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "ADD_PRODUCT" command, user can create extension code for lot using this method when customizing time. 
            "ArgumentPack" provides product name list.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="deviceBasic">Device Basic information</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProduct_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.DeviceBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "ADD_PRODUCT" command, user can create extension code for product using this method when customizing time. 
            "ArgumentPack" provides product name list.
            </summary>
            <param name="lot">Lot model</param>
            <param name="product">Product model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="deviceBasic">Device Basic information</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddProduct_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.DeviceBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "ADD_PRODUCT" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides product name list.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="deviceBasic">Device Basic information</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method creates lot.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method creates lot.
            <para>This method requires BIZDefaultInfo in argument (Argument names are same as: "[REGION],[FACILITY],[TECH],[LOTCODE],[DEVICE],[ORIGINALLOTID]").</para>
            <para>
            If lot name is not defined, user have to assign "Model._ARGUMENTVALUE_ANY" to lot name. <br/>
            If BIZDefaultInfo of lot is defined, user only needs to add "ORIGINALLOTID" to argument.
            </para>
            Final status of lot is "WAIT".
            <para>
            This method modifies follwoing tables: TAPBTLOT
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Create(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method creates lot.
            <para>This method requires BIZDefaultInfo in argument (Argument names are same as: "[REGION],[FACILITY],[TECH],[LOTCODE],[DEVICE],[ORIGINALLOTID]"). It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method validates Model. This method supports Lot only. </para>
            <para>Step3. This method cretes lot (Refer to "Create" Method, in loop). </para>
            <para>Step4. This method calls extension method for additional transaction (in loop)</para>
            <para>Final status is defined by "Track In Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Create(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method creates lot. It works in the following way: 
            <para>Step1. This method checks if lot is duplicated.</para>
            <para>Step2. This method makes Default Info for lot.</para>
            <para>Step3. This method changes Default Info of lot.</para>
            <para>Step4. This method calls extension method for lot.</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Create_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CREATE" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">lot model</param>
            <param name="requester">Requested system</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">events</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Create_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CREATE" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product model</param>
            <param name="requester">Requested system</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">events</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Create_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CREATE" command, user can create extension code for additional transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Requested system</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">events</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateLotID(TAP.Models.Factories.BIZ.BIZDefaultInfo,TAP.ArgumentPack,System.String,System.String@)">
            <summary>
            This method creates lot id
            </summary>
            <param name="defaultInfo">BIZ Default Info</param>
            <param name="arguments">Argument list</param>
            <param name="user">user</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Lot ID</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOutCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method exeucte "FABOUT" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOutCommand(System.Collections.Generic.List{TAP.Models.Factories.BIZ.BoxModel},System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method exeucte "FABOUT" command. 
            <para>This method requires BIZDefaultInfo in argument (Argument names are same as: "[TECH],[LOTCODE],[DEVICE],[ORIGINALLOTID]").</para>
            Final status of lot is "FABOUT".
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTBOX
            </para>
            </summary>
            <param name="box">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOut(System.Collections.Generic.List{TAP.Models.Factories.BIZ.BoxModel},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method exeucte "FABOUT" command. 
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model.</para>
            <para>Step2. This method checks if model exist. (in loop)</para>
            <para>Step3. This method executes "FABOUT" command (Refer to "Create" Method, in loop).</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "FABOUT".</para>
            </summary>
            <param name="box">Box List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOut(TAP.Models.Factories.BIZ.BoxModel,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method deletes lot, product and parts information and let lot move to stock.
            <para>Step1. This method checks lot status (Required lot Status is "WAIT").</para>
            <para>Step2. This method checks products status in lot (Required product Status is "WAIT").</para>
            <para>Step3. This method changes lot status.</para>
            <para>Step4. This method calls extension method for lot.</para>
            <para>Step5. This method changes lot status (ISALVIE = "NO").</para>
            <para>Step6. This method calls extension method for product (In loop).</para>
            <para>Step7. This method drops parts of product (Refer to "DropParts" method, In loop).</para>
            <para>Step8. This method changes product status (ISALVIE = "NO", In loop).</para>
            <para>Step9. This method let lot move to stock (Refer to "MoveToStock" method).</para>
            </summary>
            <param name="box"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveToStock(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            <para>Step1. This method loads nest models of lot.</para>
            <para>Step2. This method creates Stock Default Info.</para>
            <para>Step3. This method creates Stock product mdoel.</para>
            <para>Step4. This method calls extenstion method for storck product.</para>
            <para>Step5. This method changes storck product status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOut_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "FABOUT" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot"></param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOut_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "FABOUT" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="product">Product model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOut_SetStockProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Stock.ProductStockModel,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "FABOUT" command, user can create extension code for stock product using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot model</param>
            <param name="product">Stock Product model</param>
            <param name="requester">Requested system</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">events</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FabOut_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "FABOUT" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Requested system</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">events</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrackCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "FASTTRACK" command.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrackCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "FASTTRACK" command.
            <para>This method does not require any argument.</para>
            Final status of lot is "MOVE OUT TARGET" of OperationBasicInfo
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTOPERATION
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrack(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "FASTTRACK" command.
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model list.</para>
            <para>Step2. This method checks model status. (Required status is "WAIT").</para>
            <para>Step3. This method loads Operation Basic Info.</para>
            <para>Step4. This method loads cassette information.</para>
            <para>Step5. This method execute "SKIP" command (Refer to "LotSkip" and "ProductSkip" method).</para>
            <para>Step6. This method changes cassette status (Final stauts is "IN_USE", "READY" and "SKIP").</para>
            <para>Step7. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "Track Out Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotFastTrack(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method calls extension method for lot.</para>
            <para>Step2. This method calls extension method for product (In loop).</para>
            <para>Step3. This method loads Operation Basic Info.</para>
            <para>Step4. This method chagnes Operation status.</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="cassette"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrack_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            This method sets lot model members for "TRACIN" command
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrack_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            This method sets product model members for "TRACIN" command
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrack_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            User can writes additional transaction memeber in this method.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FastTrack_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            User can writes additional transaction memeber in this method.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="product">Product</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ForwardCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method let lot move to target operation. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ForwardCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method let lot move to target operation. 
            <para>This method requires "Target Operation" in argument (Argument names are same as: "[TARGETOP]").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Forward(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method let lot move to target operation.
            <para>This method requires "Target Operation" in argument (Argument names are same as: "[TARGETOP]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model.</para>
            <para>Step2. This method loads target operation from arguments.</para>
            <para>Step2-1. If target opeartion is "ANY", method loads current operation from product.</para>
            <para>Step3. This method executes "FORWARD" command (Refer to "Forward" Method, in loop).</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is same as "MOVE_IN" command.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Forward(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            <para>Step1. This method loads current Operation Basic Info from lot.</para>
            <para>Step2. This method makes Argument Packs for MoveOut, MoveOut without cassette, Move step and Move step without cassette.</para>
            <para>Step3. This method loads Operation Basic Info of target operation.</para>
            <para>Step4. This method makes MoveOut and Move Operation Argument Pack.</para>
            <para>Step5. This method makes Skip Argument Pack (In loop).</para>
            <para>Step6. This method calls extension method for lot.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="targetOP"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Forward_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "FORWARD" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="targetStep">Traget Step</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Forward_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "FORWARD" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="targetStep">Target step</param>
            <param name="functionBasic">Function Basic Information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "MOVE_IN" command. This method assign equipment information to lot and product. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "MOVE_IN" command. This method assign equipment information to lot and product. 
            <para>This method requires equipment and operation information in argument (Argument names are same as: "[EQUIPMENT],[OPERATION*]").</para>
            <para>
            If operation is not assigned. method find next operation from current operation.<br/>
            </para>
            Final status of lot is "WAIT".
            <para>
            This method modifies follwoing tables: TAPBTLOT
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveIn(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method let lots move to specified operation. 
            <para>This method requires equipment and operation information in argument (Argument names are same as: "[EQUIPMENT],[OPERATION*]"). It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method loads cassette information.</para>
            <para>Step3. This method loads Operation Info of next operation.</para>
            <para>Step4. This method loads equipment information.</para>
            <para>Step4. This method execute "MOVE_IN" command (Refer to "MoveIn" method, In loop).</para>
            <para>Step5. This method execute changes cassette status.</para>
            <para>Step6. This method calls extension method for additional transaction.</para>
            <para>Final status is "WAIT" or "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveIn(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method let lot move to specified operation. It works in the following way: 
            <para>Step1. This method validates lot.</para>
            <para>Step2. This method checks lot and product status (Required statuses are "IN_MOVE", "READY", "WAIT".</para>
            <para>Step3. This method calls extension method for lot.</para>
            <para>Step4. This method calls extension method for product (In loop).</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.GetCurrentOperationBasicInfo(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.ArgumentPack,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method get OperationBasicInfo using equipment and cassette.
            </summary>
            <param name="lot">Lot</param>
            <param name="equipment">Equipment</param>
            <param name="cassette">Cassette</param>
            <param name="argument">Argument</param>
            <param name="functionBasic">FunctionBasicModel</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>OperationBasicInfo</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveIn_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_IN" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides equipment and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveIn_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_IN" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides equipment and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveIn_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_IN" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides equipment and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithOutCassetteCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method execute "MOVE_IN_WITHOUTCASSETTE" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithOutCassetteCommand(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method execute "MOVE_IN_WITHOUTCASSETTE" command. 
            <para>This method does not require any argument.</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithOutCassette(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method execute "MOVE_IN_WITHOUTCASSETTE" command.
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method loads destination equipment information.</para>
            <para>Step3. This method loads Operation Info of next operation.</para>
            <para>Step4. This method executes "MOVE_IN_WITHOUTCASSETTE" command (Refert to "MoveInWithOutCassette" method).</para>
            <para>Step5. This method calls extension method for additional transaction (In loop).</para>
            <para>Final status is "WAIT" or "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithOutCassette(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method executes "MOVE_IN_WITHOUTCASSETTE" command for lot. 
            <para>Step1. This method validates argument.</para>
            <para>Step1. This method validates lot.</para>
            <para>Step2. This method checks lot status (Required statuses are "IN_MOVE", "READY", "WAIT".</para>
            <para>Step3. This method calls extension method for lot.</para>
            <para>Step4. This method calls extension method for product (In loop).</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithOutCassette(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.Boolean,System.String@)">
            <summary>
            This method executes "MOVE_IN_WITHOUTCASSETTE" command for product. 
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method checks if this operation needs Part-Subtype-Checking.</para>
            <para>Step3. This method checks product status (Required statuses are "IN_MOVE", "READY", "WAIT".</para>
            <para>Step3. This method calls extension method for lot.</para>
            <para>Step4. This method calls extension method for product (In loop).</para>
            <para>Step5. This method changes product status (In loop).</para>
            <para>Step6. If all products of lot are moved in, this method changes lot status.</para>
            </summary>
            <param name="product"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="functionBasic"></param>
            <param name="isBatch"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithoutCassette_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_IN_WITHOUTCASSETTE" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides equipment name.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="equipment">Equipment model</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithoutCassette_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_IN_WITHOUTCASSETTE" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides equipment name.
            </summary>
            <param name="product">Produt Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="equipment">Equipment model</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithoutCassette_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.Int32,System.String@)">
            <summary>
            For "MOVE_IN_WITHOUTCASSETTE" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides equipment name.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="equipment">Equipment model</param>
            <param name="functionBasic">Function basic information</param>
            <param name="index">Count of calling</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveInWithoutCassette_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.Int32,System.String@)">
            <summary>
            For "MOVE_IN_WITHOUTCASSETTE" command, user can create extension code for additional product transaction using this method when customizing time.
            ArgumentPack provides equipment name.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="equipment">Equipment model</param>
            <param name="functionBasic">Function basic information</param>
            <param name="index">Count of calling</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NGCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method execute "NG" command.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NGCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method execute "NG" command.
            <para>This method does not require any argument. </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NG(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method execute "NG" command.
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method validates model.</para>
            <para>Step3. This method loads Operation Basic Info.</para>
            <para>Step4. This method validates Track Out Base uisng Operation Basic Info.</para>
            <para>Step5. This method checks model status (Required status is "BUSY").</para>
            <para>Step6. This method loads equipment information.</para>
            <para>Step7. This method loads chambger information.</para>
            <para>Step8. This method executes "NG" command (Refert to "LotNG" and "ProductNG" method).</para>
            <para>Step9. This method updates equipment status.</para>
            <para>Step10. This method updates chamber status.</para>
            <para>Step11. This method calls extension method for additional transaction.</para>
            <para>Final status is "NG".</para>
            </summary>
            <param name="model">Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotNG(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method works in the following way: 
            <para>Step1. This method validates lot.</para>
            <para>Step2. This method loads products' information of lot lot.</para>
            <para>Step3. This method loads Operation Info (In loop).</para>
            <para>Step4. This method loads Defect Info (In loop).</para>
            <para>Step5. This method calls extension method for product (In loop).</para>
            <para>Step6. This method calls extension method for lot.</para>
            <para>Step7. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="arguments"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ProductNG(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method works in the following way: 
            <para>Step1. This method validates product.</para>
            <para>Step2. This method loads Operation Info (In loop).</para>
            <para>Step4. This method loads Defect Info (In loop).</para>
            <para>Step5. This method chnages lot status.</para>
            <para>Step6. This method calls extension method for lot.</para>
            <para>Step7. This method changes lot status.</para>
            <para>Step7. This method changes product status.</para>
            </summary>
            <param name="product"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="arguments"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NG_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "NG" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Opearation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NG_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "NG" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Opearation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NG_SetDefect(TAP.Models.Factories.BIZ.Operation,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "NG" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="operation">Operation Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Opearation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NG_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "NG" command, user can create extension code for additional lot transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Opearation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.NG_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "NG" command, user can create extension code for additional product transaction using this method when customizing time.
            </summary>
            <param name="product">Product</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Opearation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.SkipCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "SKIP" command.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.SkipCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "SKIP" command.
            <para>This method does not require any argument.</para>
            Final status of lot is "TRACK OUT TARGET" of OperationBasicInfo
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTOPERATION
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Skip(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "SKIP" command.
            <para>This method does not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model list.</para>
            <para>Step2. This method checks model status. (Required status is "WAIT").</para>
            <para>Step3. This method loads Operation Basic Info.</para>
            <para>Step4. This method loads cassette information.</para>
            <para>Step5. This method execute "SKIP" command (Refer to "LotSkip" and "ProductSkip" method).</para>
            <para>Step6. This method changes cassette status (Final stauts is "IN_USE", "READY" and "SKIP").</para>
            <para>Step7. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "Track Out Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotSkip(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method calls extension method for lot.</para>
            <para>Step2. This method calls extension method for product (In loop).</para>
            <para>Step3. This method loads Operation Basic Info.</para>
            <para>Step4. This method chagnes Operation status.</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="cassette"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Skip_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            This method sets lot model members for "TRACIN" command
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Skip_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            This method sets product model members for "TRACIN" command
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Skip_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            User can writes additional transaction memeber in this method.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Skip_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            User can writes additional transaction memeber in this method.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="product">Product</param>
            <param name="requester">Request unit(OIP, EIS..)</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">Events occured by this method</param>
            <param name="operationBasic">Operation basic information</param>
            <param name="cassette">Cassette model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassetteCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This methods executes "MOVE_OUT" command.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassetteCommand(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "MOVE_OUT_WITHOUTCASSETTE" command.
            <para>This method requires "Move Out Type" and "Target equipment status" in argument (Argument names are same as: "[MOVE_OUTTYPE],[EQUIPMENTSTATUS]").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassette(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "MOVE_OUT_WITHOUTCASSETTE" command.
            <para>This method requires "Move Out Type" and "Target equipment status" in argument (Argument names are same as: "[MOVE_OUTTYPE],[EQUIPMENTSTATUS]"). It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method loads target Operation Basic Info.</para>
            <para>Step3. This method executes "MOVE_OUTWITHOUTCASSETTE" command (Refer to "MoveOutWithoutCassette" method).</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is "IN_MOVE".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassette(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,System.Boolean,System.Boolean,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method let lot move to specified operation. It works in the following way: 
            <para>Step1. This method validates lot.</para>
            <para>Step2. This method checks lot and product status (Required statuses are "READY" and "NG").</para>
            <para>Step3. This method loads target equipment information.</para>
            <para>Step4. This method calls extension method for lot.</para>
            <para>Step5. This method calls extension method for product (In loop).</para>
            <para>Step6. This method changes lot status.</para>
            <para>Step7. This method delete cassette information.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="area"></param>
            <param name="isAUto"></param>
            <param name="isDontcare"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassette_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,System.String,System.Boolean,System.Boolean,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT_WITHOUTCASSETTE" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), MoveOut Type and Equipment Status
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="area">Area</param>
            <param name="isAUto">If 'TRUE', workflow finds equipment automatically</param>
            <param name="isDontcare">If 'TRUE', workflow does not care equipment status</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassette_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,System.String,System.Boolean,System.Boolean,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT_WITHOUTCASSETTE" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), MoveOut Type and Equipment Status
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="area">Area</param>
            <param name="isAUto">If 'TRUE', workflow finds equipment automatically</param>
            <param name="isDontcare">If 'TRUE', workflow does not care equipment status</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassette_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT_WITHOUTCASSETTE" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), MoveOut Type and Equipment Status
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="area">Area</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutWithoutCassette_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT_WITHOUTCASSETTE" command, user can create extension code for additional product transaction using this method when customizing time.
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), MoveOut Type and Equipment Status
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="area">Area</param>
            <param name="functionBasic">Function basic information</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReceiveCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This moethod receive lot from previous manufacturing. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReceiveCommand(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This moethod receive lot from previous manufacturing. 
            <para>This method requires "Equpment" and "Cassette Name" in argument (Argument names are same as: "[EQUIPMENT],[CASSETTENAME]").</para>
            </summary>
            <param name="frontLot">Front Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Receive(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This moethod receive lot from previous manufacturing. This command is exectued by FRONT LOT BASE ONLY.
            <para>This method requires "Equpment" and "Cassette Name" in argument (Argument names are same as: "[EQUIPMENT],[CASSETTENAME]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model list.</para>
            <para>Step2. This method loads casset information and checks cassette status (Required status is "NOT_IN_USE" and "WAIT").</para>
            <para>Step3. This method loads equipment information and checks equipment status (Required status is  "WAIT").</para>
            <para>Step4. This method creates lot (Refer to "Receive" method).</para>
            <para>Step5. This method changes cassette status (Final status is "IN_USE", "CLEAN" and "READY").</para>
            <para>Step6. This method changes equipment status (Final stauts is "WAIT").</para>
            <para>Step7. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "Track In Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Receive(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            This method works in the following way: 
            <para>Step1. This method validates model.</para>
            <para>Step2. This method creates lot.</para>
            <para>Step3. This method creates Operation Info.</para>
            <para>Step5. This method calls extension method for lot.</para>
            <para>Step6. This method creates product (In loop).</para>
            <para>Step6. This method adds operation to  product (In loop).</para>
            <para>Step7. This method calls extension method for product (In loop).</para>
            <para>Step7. This method delete front product (In loop).</para>
            <para>Step7. This method delete front lot.</para>
            <para>Step7. This method changes lot status.</para>
            </summary>
            <param name="model"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="equipment"></param>
            <param name="cassette"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Receive_SetLot(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            For "RECEIVE" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides equipment and cassette name.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="fLot">Front lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Opeartion basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Receive_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            For "RECEIVE" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides equipment and cassette name.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Receive_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,System.String@)">
            <summary>
            For "RECEIVE" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides equipment and cassette name.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackInCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "TRACKIN" command. This method create Operation Model.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackInCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "TRACKIN" command. This method create Operation Model.
            <para>This method requires operation result in arguments ().
            Final status of lot is Track In Target of Operation Basic Info.</para>
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTOPERATION, TAPBTEQUIPMENT, TAPBTCHAMBER
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackIn(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "TRACKIN" command.
            <para>This method does not require any argument argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model list.</para>
            <para>Step2. This method chekcs lot and product status (Required status is "WAIT").</para>
            <para>Step3. This method loads operation information (Required equipment status is "WAIT", required chamber status is "NOT_IN_USE").</para>
            <para>Step4. This method loads equipment and chamber information and check status.</para>
            <para>Step5. This method loads cassette information.</para>
            <para>Step6. This method loads recipe information.</para>
            <para>Step7. This method executes "TRACKIN" command (Refer to  "LotTrackIn" method).</para>
            <para>Step8. This method changes equipment and chamber information.</para>
            <para>Step8. This method changes cassette information.</para>
            <para>Step9. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "Track In Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotTrackIn(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.ChamberModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks if operatoin basic info includes parts information when it is CASTING operation.</para>
            <para>Step2. This method calls extension method for lot.</para>
            <para>Step3. This method calls extension method for product (In loop).</para>
            <para>Step4. This method assigns opeartion to product (In loop).</para>
            <para>Step5. This method adds parts to product when it is CASTING operation (Refer to "Assemble" method, In loop).</para>
            <para>Step6. This method changes opeartion status (In loop).</para>
            <para>Step7. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="recipe"></param>
            <param name="equipment"></param>
            <param name="chamber"></param>
            <param name="cassette"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackIn_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,System.String,System.String,System.String@)">
            <summary>
            For "TRACKIN" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="recipe">Recipe Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="chamber">Chamber Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackIn_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,System.String,System.String@)">
            <summary>
            For "TRACKIN" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="recipe">Recipe Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="chamber">Chamber Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackIn_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,System.String,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "TRACKIN" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation basic Info</param>
            <param name="recipe">Recipe Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="chamber">Chamber Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackIn_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "TRACKIN" command, user can create extension code for additional product transaction using this method when customizing time.
            ArgumentPack provides equipment, chamber, recipe and cassette name
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation basic Info</param>
            <param name="recipe">Recipe Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="chamber">Chamber Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackOutCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "TRACKOUT" command.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackOutCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "TRACKOUT" command.
            <para>This method requires parameters that is may be parts, mesured parameter and so on (Argument names are same as: "[OPERATIONRESULT],[A.01],[A.02]...[Z.99]". 'A' is product name and number is part or parameter name).
            Final status of lot is Track Out Target of Operation Basic Info.</para>
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTOPERATION, TAPBTEQUIPMENT, TAPBTCHAMBER
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackOut(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "TRACKOUT" command.
            <para>This method requires operation result and  parameters that is may be parts, mesured parameter and so on (Argument names are same as: "[A.01],[A.02]...[Z.99]". 'A' is product name and number is part or parameter name). It works in the following way: </para>
            <para>Step1. This method validates argument and lot list.</para>
            <para>Step2. This method loads Operation Basic Info.</para>
            <para>Step3. This method chekcs lot and product status (Required status is "BUSY").</para>
            <para>Step4. This method loads equpment information and checks status.</para>
            <para>Step5. This method executes "TRAKOUT" command (Refer to "LotTrackOut" method).</para>
            <para>Step6. This method changes equipment and chamber information.</para>
            <para>Step7. This method calls extension method for additional transaction.</para>
            <para>Final status is defined by "Track Out Target" of Operation Basic Info.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotTrackOut(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.ChamberModel,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks parts or parameter information in Operation Basic Info when it is CASTING, ASSEMBLE or MEASURE operation.</para>
            <para>Step2. This method sets operation (In loop).</para>
            <para>Step3-1. This method executes to assemble when operation is "ASSEMBLE" or "CASTING" (Refer to "Assemble" method, In loop).</para>
            <para>Step3-2. This method executes to disassemble when operation is "DISASSEMBLE" (Refer to "Disassemble" method, In loop).</para>
            <para>Step3-3. This method executes to repair when operation is "REPAIR" (Refer to "Repair" method, In loop).</para>
            <para>Step3-3. This method executes to measure when operation is "MEASURE" (Refer to "Measure" method, In loop).</para>
            <para>Step4. This method calls extension method for product (In loop).</para>
            <para>Step5. This method changes operation status (In loop).</para>
            <para>Step6. This method calls extenstion method for lot.</para>
            <para>Step7. This method changes lot status.</para>
            <para>Step8. This method changes cassette status (Final cassette status is "IN_USER" and "READY").</para>
            </summary>
            <param name="model"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="arguments"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="chamber"></param>
            <param name="recipe"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Assemble(TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BIZ.Operation,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,System.Boolean,System.String,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks if client saves part info.</para>
            <para>Step2. This method validate Part Basic Info.</para>
            <para>Step3. This method creates inventory model (In loop).</para>
            <para>Step4. This method checks part type and part sub type.</para>
            <para>Step5. This method creates part and add it to operation information.</para>
            </summary>
            <param name="operationBasic"></param>
            <param name="operation"></param>
            <param name="partInfo"></param>
            <param name="events"></param>
            <param name="comment"></param>
            <param name="checkPart"></param>
            <param name="user"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Disassemble(TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BIZ.Operation,TAP.Models.Factories.BIZ.Product,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,System.Boolean,System.String,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method finds part list assembled.</para>
            <para>Step3. This method creates inventory model (In loop).</para>
            <para>Step4. This method checks if parts is assembled.</para>
            <para>Step5. This method creates part and adjusts inventory information.</para>
            </summary>
            <param name="operationBasic"></param>
            <param name="operation"></param>
            <param name="product"></param>
            <param name="partInfo">Part list for disassemble</param>
            <param name="events"></param>
            <param name="comment"></param>
            <param name="checkPart"></param>
            <param name="user"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Repair(TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BIZ.Operation,TAP.Models.Factories.BIZ.Product,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,System.Boolean,System.String,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method disassembles parts for repair (Refer to "Disassemble" method).</para>
            <para>Step2. This method assembles parts for repair (Refer to "Assembled" method).</para>
            </summary>
            <param name="operationBasic"></param>
            <param name="operation"></param>
            <param name="product"></param>
            <param name="partInfo"></param>
            <param name="events"></param>
            <param name="comment"></param>
            <param name="checkPart"></param>
            <param name="user"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AddParameter(TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BIZ.Operation,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,System.String,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks this operation exeuctes measurement.</para>
            <para>Step2. This method collects parameter values ans add them add to operation information (In loop).</para>
            </summary>
            <param name="operationBasic"></param>
            <param name="operation"></param>
            <param name="parameterInfo"></param>
            <param name="events"></param>
            <param name="comment"></param>
            <param name="user"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackOut_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.Boolean,System.String@)">
            <summary>
            For "TRACKOUT" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides parts or parameter information.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="checkDetail">If "TRUE", method checks "Sub Type"</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackOut_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.Boolean,System.String@)">
            <summary>
            For "TRACKOUT" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides parts or parameter information.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="checkDetaill">If "TRUE", method checks "Sub Type"</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.TrackOut_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,System.Boolean,System.String@)">
            <summary>
            For "TRACKOUT" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides parts or parameter information.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="arguments">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="checkDetaill">If "TRUE", method checks "Sub Type"</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This methods executes "MOVE_OUT" command.
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOutCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This methods executes "MOVE_OUT" command.
            <para>This method requires cassette name,  target area and  equipment in argument (Argument names are same as: ""[AREA*],[EQUIPMENT*]""). </para>
            <para>
            If cassette transfer type is 'MES_CARE_EQP', "Area" information of equipment and "Processing Area" information must be set. And one of equipment in next area must have "IDLE" status.<br/>
            If cassette transfer type is 'MES_DONCARE_EQP', "Area" information of equipment and "Processing Area" information must be set. <br/>
            If cassette transfer type is 'AUTO' or 'MANUAL', thie method does not care destination of cassette. <br/>
            </para>
            Final status of lot is "IN_MOVE".
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPFTCASSETTE, TAPFTEQUIPMENT AND TAPFTCHAMBER
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOut(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This methods executes "MOVE_OUT" command.This command is exectued by LOT BASE ONLY.
            <para>This method requires "Move Out Type" and "Target equipment status" in argument (Argument names are same as: "[MOVE_OUTTYPE],[EQUIPMENTSTATUS]"). It works in the following way: </para>
            <para>Step1. This method validates argument.</para>
            <para>Step2. This method loads target Operation Basic Info and equipment information.</para>
            <para>Step3. This method loads cassette information (Refer to "LoadCassetteModel" method).</para>
            <para>Step4. This method executes "MOVE_OUT" command (Refer to "MoveOut" method).</para>
            <para>Step5. This method set casssette information (Refer to "" method. Final cassette status is  "IN_USE" and "IN_TRANSFER".</para>
            <para>Step6. This method calls extension method for additional transaction.</para>
            <para>Final status is "IN_MOVE".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FindDestination(TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.Factories.BIZ.Lot,System.String,TAP.ArgumentPack,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method find next equipment and set it to cassette.
            </summary>
            <param name="cassette">Casssette</param>
            <param name="lot">Lot</param>
            <param name="user">User</param>
            <param name="argument">Argument</param>
            <param name="functionBasic">FunctionBasicModel</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", method find and assign next equipment successfully.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FindEquipmentFromClient(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            This method find usable equipment in spcfied facility, line, and area
            </summary>
            <param name="facility">Facility</param>
            <param name="line">Line</param>
            <param name="area">Area</param>
            <param name="bay">Bay</param>
            <param name="user">User</param>
            <param name="careEquipmentStatus">If "TRUE", system will find equipment that is in "WAIT" status</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.FindEquipment(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            This method find usable equipment in spcfied facility, line, and area
            </summary>
            <param name="facility">Facility</param>
            <param name="line">Line</param>
            <param name="area">Area</param>
            <param name="bay">Bay</param>
            <param name="user">User</param>
            <param name="careEquipmentStatus">If "TRUE", system will find equipment that is in "WAIT" status</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Equipment Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOut(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method let lot move to specified operation. It works in the following way: 
            <para>Step1. This method validates lot.</para>
            <para>Step2. This method checks lot status (Required statuses are "READY" and "NG").</para>
            <para>Step3. This method chekcs cassette status (Required statuses are "NOT_IN_USE")</para>
            <para>Step4. This method checks product status (Required statuses are "READY" and "NG").</para>
            <para>Step5. This method calls extension method for additional transaction.</para>
            <para>Step6. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="opertionBasic"></param>
            <param name="equipment"></param>
            <param name="cassette"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOut_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), Cassette name, MoveOut Type and Equipment Status
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOut_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), Cassette name, MoveOut Type and Equipment Status
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MoveOut_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MOVE_OUT" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides Facility, Line, Area, Bay(*), Main equipment(*), Cassette name, MoveOut Type and Equipment Status
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="equipment">Equipment Model</param>
            <param name="cassette">Cassette Model</param>
            <param name="functionBasic">Function basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrderCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "ASSIGN_WORKORDER" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrderCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "ASSIGN_WORKORDER" command. 
            <para>This method requires BIZ default Info in argument (Argument names are same as: "[REGION],[FACILITY],[WORKORDERNAME]").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DeAssignWorkOrderCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "DEASSIGN_WORKORDER" command. 
            <para>This method requires BIZ default Info in argument (Argument names are same as: "[REGION],[FACILITY],[WORKORDERNAME]").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrder(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "ASSIGN_WORKORDER" command. 
            <para>This method requires BIZ default Info in argument (Argument names are same as: "[REGION],[FACILITY],[WORKORDERNAME]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method loads work order.</para>
            <para>Step2. This method assigns work order to lots (Refer to "AssignWorkOrder" method).</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrderLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BIZ.WorkOrderModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks lot status (lot must be in "FIRST OPERATION", lot status must be "BUSY" and lot DOES NOT HAVE "Work order").</para>
            <para>Step2. This method calls extension method for lot.</para>
            <para>Step3. This method assign (Deassign) work order to lot.</para>
            <para>Step4. This method calls extension method for product (In loop).</para>
            <para>Step5. This method  assign (Deassign) work order to product (In loop).</para>
            <para>Step6. This method  changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="workorder"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrder_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.Collections.Generic.List{TAP.ArgumentPack},System.String@)">
            <summary>
            For "ASSIGN_WORKORDER" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="resultPack">Result Argument Pack for transaction</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrder_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.Collections.Generic.List{TAP.ArgumentPack},System.String@)">
            <summary>
            For "ASSIGN_WORKORDER" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="resultPack">Result Argument Pack for transaction</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DeAssignWorkOrder_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "DEASSIGN_WORKORDER" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides work order name
            </summary>
            <param name="lot">Product</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DeAssignWorkOrder_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "DEASSIGN_WORKORDER" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides work order name
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.AssignWorkOrder_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ADD_PRODUCT" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides work order name
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.DeAssignWorkOrder_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ADD_PRODUCT" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides work order name
            </summary>
            <param name="lot">Lot model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeCassetteCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "CHAGE_CASSETTE" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeCassetteCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "CHAGE_CASSETTE" command. 
            <para>This method requires cassette name in argument (Argument names are same as: "[CASSETTENAME]").</para>
            <para>
            This method executes 3 commands as below.<br/>
            If lot has cassette name and argument has casstte name, this method excutes "CHANGE_CASSTTE" command.<br/>
            If lot has cassette name and arguemnt does not have cassette name, this method executes "REMOVE_CASSETTE" command.<br/>
            If lot does not have cassette name and argument has cassette name, this method executes "ASSIGN_CASSETTE" command.
            </para>
            This method does not change model status
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPFTCASSETTE
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeCassette(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "CHAGE_CASSETTE" command. 
            <para>This method requires cassette name in argument (Argument names are same as: "[CASSETTENAME]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method checks cassette status (Required statuses are "NOT_IN_USE" and "WAIT").</para>
            <para>Step2. This method checks lot status in cassette (All lot of cassette have same status, In loop).</para>
            <para>Step4. This method loads equipment information (In loop).</para>
            <para>Step4. This method calls extension method for lot (In loop).</para>
            <para>Step4. This method collects old cassette infomration and changes cassette information of lot (In loop).</para>
            <para>Step4. This method changes old cassette status  (Refer to "ChangeOldCassetteStatus" method).</para>
            <para>Step4. This method changes new cassette status  (Final status is "IN_USE", "READY").</para>
            <para>Step4. This method calls extension method for additional transaction.</para>
            <para>Final status is "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeOldCassetteStatus(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.Facilities.EquipmentModel,System.Collections.Generic.List{System.String},TAP.Models.SystemBasic.FunctionBasicModel,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks lot status in cassette. (All lot of cassette have same status).</para>
            <para>Step2-1. If lot status is "WAIT", method changes cassette satus to "WAIT".</para>
            <para>Step2-2. If lot status is "IN_MOVE", method changes cassette satus to "IN_TRANSFER".</para>
            <para>Step2-3. If lot status is "READY", method changes cassette satus to "READY".</para>
            <para>Step2-4. Else method changes cassette status to current status..</para>
            </summary>
            <param name="model"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="equipment"></param>
            <param name="oldCassetteList"></param>
            <param name="functionBasic"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeCassette_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CHAGE_CASSETTE" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeCassette_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CHAGE_CASSETTE" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeCassette_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CHAGE_CASSETTE" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageDeviceCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "CHAGE_DEVICE" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageDeviceCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "CHAGE_DEVICE" command. 
            <para>This method requires Default Info in argument (Argument names are same as: "[REGION],[FACILITY],[TECH],[LOTCODE],[DEVICE]").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageDevice(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "CHAGE_DEVICE" command. 
            <para>This method requires Default Info in argument (Argument names are same as: "[REGION],[FACILITY],[TECH],[LOTCODE],[DEVICE]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method creates new Default Info.</para>
            <para>Step3. This method executes "CHANGE_DEVICE" command (Refer to "ChnageDevice" method).</para>
            <para>Step4. This method calls extensiom method for additional transaction.</para>
            <para>Final status is "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageDevice(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BIZ.BIZDefaultInfo,System.String@)">
            <summary>
            This method executes "CHAGE_DEVICE" command. It works in the following way: 
            <para>Step1. This method checks lot status (Required status is "READY", "WAIT", "NG" or "HOLD").</para>
            <para>Step2. This method calls extensiom method for lot.</para>
            <para>Step3. This method changes Default Info.</para>
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="newDefaultInfo">Target Device Information Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageDevice_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "CHAGE_DEVICE" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageDevice_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "CHAGE_DEVICE" command, user can create extension code for additional transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeStatusCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "CHAGE_STATUS" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeStatusCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "CHAGE_STATUS" command. 
            <para>This method requires target status in argument (Argument names are same as: "[TARGETSTATUS],[CHANGEPRODUCT]").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeStatus(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "CHAGE_STATUS" command. 
            <para>This method requires target status in argument (Argument names are same as: "[TARGETSTATUS],[CHANGEPRODUCT]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method gets target status and loads whether products changes are required.</para>
            <para>Step3. This method executes "CHANGE_STATUS" command (Refer to "ChnageStatus" method).</para>
            <para>Step4. This method calls extensiom method for additional transaction.</para>
            <para>Final status is "READY".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChnageStatus(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.EnumFactoryStatus,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks product status (All products of lot have same status).</para>
            <para>Step2. This method calls extension method for lot.</para>
            <para>Step3. This method calls extension method for product (In loop).</para>
            <para>Step4. This method changes product status (In loop).</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="targetStatus"></param>
            <param name="functionBasic"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeStatus_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CHNAGE_STATUS" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="targetStatus">Target status</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeStatus_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CHNAGE_STATUS" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="targetStatus">Target status</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ChangeStatus_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "CHNAGE_STATUS" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.HoldCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "HOLD" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.HoldCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "HOLD" command. 
            <para>This method deos not require any argument.</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Hold(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "HOLD" command. 
            <para>This method deos not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method executes "HOLD" command (Refer to "Hold" method).</para>
            <para>Step3. This method calls extensiom method for additional transaction.</para>
            <para>Final status is "HOLD".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.HoldLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks lot status (Required status is "READY", "WAIT", "NG" or "BUSY").</para>
            <para>Step2. This method calls extension method for lot.</para>
            <para>Step3. This method calls extension method for product (In loop).</para>
            <para>Step4. This method changes product status (In loop).</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Hold_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "HOLD" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Hold_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "HOLD" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Hold_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "HOLD" command, user can create extension code for additional transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MergeCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "MERGE" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.MergeCommand(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "MERGE" command. 
            <para>This method deos not require any argument.</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Merge(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "MERGE" command. 
            <para>This method deos not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method checks lot status (Required status is "READY", "WAIT", "NG", "HOLD" or "BUSY", in loop).</para>
            <para>Step3. This method checks if target Default Info of targert lot is same.</para>
            <para>Step4. This method loads Default Info of first lot.</para>
            <para>Step5. This method validate lot capacity.</para>
            <para>Step6. This method loads products of target lot and changes Default Info of prodcuts (In loop).</para>
            <para>Step7. This method clears product list of target lot (In loop).</para>
            <para>Step8. This calls extension method for product.</para>
            <para>Step9. This method add products to first lot (In loop).</para>
            <para>Step10. This method changes target lot status (Final Status is "DROP", In loop).</para>
            <para>Step11. This method calls extension method for lot.</para>
            <para>Step12. This method changes lot status.</para>
            <para>Final status is current satatus of first lot.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Merge_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MERGE" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Merge_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "MERGE" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requested system</param>
            <param name="user">User</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument</param>
            <param name="events">events</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Merge_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "ADD_PRODUCT" command, user can create extension code for additional transaction using this method when customizing time.
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReleaseCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executes "RELEASE" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReleaseCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "RELEASE" command. 
            <para>This method deos not require any argument.</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Release(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "RELEASE" command. 
            <para>This method deos not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method executes "RELEASE" command (Refer to "Release" method).</para>
            <para>Step3. This method calls extensiom method for additional transaction.</para>
            <para>Final status is "RELEASE".</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ReleaseLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks lot status (Required status is "HOLD").</para>
            <para>Step2. This method calls extension method for lot.</para>
            <para>Step3. This method calls extension method for product (In loop).</para>
            <para>Step4. This method finds previous status.</para>
            <para>Step5. This method changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Release_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "RELEASE" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Release_SetProduct(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>>
            For "RELEASE" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Release_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "RELEASE" command, user can create extension code for additional transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.RollBackCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>>
            This method executes "ROLLBACK" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.RollBackCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "ROLLBACK" command. 
            <para>This method requires last event time key optionally (Argument names are same as: "[LASTEVENTTIMEKEY]").</para>
            <para>
            This method let lot rollback to previous step. Required status is BUSY, READY, NG.<br/>
            This method can not rollback "CHANGE_DEIVCE" command. If you want to rollback "CHANGE_DEVICE" command, you have to use "CHANGE_DEVICE" command again.
            </para>
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTOPERATION
            </para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.RollBack(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "ROLLBACK" command. 
            <para>This method requires last event time key optionally (Argument names are same as: "[LASTEVENTTIMEKEY]"). It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method executes "ROLLBACK" command (Refer to "LotRollback" method).</para>
            <para>Step3. This method executes "ROLLBACK" for cassette (Refer to "CassetteRollBack" method).</para>
            <para>Step4. This method chages lot status.</para>
            <para>Step5. This method calls extensiom method for additional transaction.</para>
            <para>Final status is "RELEASE".</para>
            </summary>
            <param name="model">Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.LotRollBack(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method gets previous step.</para>
            <para>Step2. This method calls extension method for lot.</para>
            <para>Step3. This method inherits previous status to lot.</para>
            <para>Step4. This method finds previous status.</para>
            <para>Step5. This method changes lot status.</para>
            <para>Step6. This method executes product rollback (Refer to "ProductRollBack" method).</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.ProductRollBack(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method gets previous step.</para>
            <para>Step2. This method inherits previous status to product.</para>
            <para>Step3. This method calls extension method for product.</para>
            </summary>
            <param name="product"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CassetteRollBack(TAP.Models.Factories.Facilities.CassetteModel,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method gets previous step.</para>
            <para>Step2. This method inherits previous status to product.</para>
            <para>Step3. This method calls extension method for product.</para>
            </summary>
            <param name="cassettte"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Rollback_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ROLLBACK" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Rollback_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ROLLBACK" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Rollback_SetCassette(TAP.Models.Factories.Facilities.CassetteModel,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ROLLBACK" command, user can create extension code for cassette using this method when customizing time. 
            </summary>
            <param name="cassettte">Cassette Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Rollback_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ROLLBACK" command, user can create extension code for additional lot transaction using this method when customizing time.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Rollback_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            For "ROLLBACK" command, user can create extension code for additional lot transaction using this method when customizing time.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.SplitCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>>
            This method executes "SPLIT" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.SplitCommand(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "SPLIT" command. 
            <para>This method requires target lot and product list to split (Argument names are same as: "[LOT],[PRODUCT1],[PRODUCT2],[PRODUCT3],[PRODUCT4],[PRODUCT5]...").</para>
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Split(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "SPLIT" command. 
            <para>This method requires target lot and product list to split (Argument names are same as: "[LOT],[PRODUCT1],[PRODUCT2],[PRODUCT3],[PRODUCT4],[PRODUCT5]...") . It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method checks lot status (Required status is "READY", "WAIT", "NG" or "HOLD"  in loop).</para>
            <para>Step3. This method creates and checks target lot.</para>
            <para>Step4. This method loads product for split and checks it (In loop).</para>
            <para>Step5. This method calls extension method for prodcut (In loop).</para>
            <para>Step6. This method changes Default Info of product (In loop).</para>
            <para>Step7. This method add product to new lot (In loop).</para>
            <para>Step8. This method remove product from old lot.</para>
            <para>Step9. This method calls extension method for new lot.</para>
            <para>Step10. This method calls extension method for old lot.</para>
            <para>Step11. This method calls extension method for additional transaction.</para>
            <para>Final status is current satatus of first lot.</para>
            </summary>
            <param name="model">Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Split_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "SPLIT" command, user can create extension code for lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Split_SetNewLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "SPLIT" command, user can create extension code for new lot using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Split_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "SPLIT" command, user can create extension code for product using this method when customizing time. 
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Split_AddTransaction(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "SPLIT" command, user can create extension code for additional lot transaction using this method when customizing time.
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Split_AddTransaction(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            For "SPLIT" command, user can create extension code for additional product transaction using this method when customizing time.
            ArgumentPack provides Region, Facility, Tech, Lot code and device.
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateBoxCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>>
            This method executes "CREATE_BOX" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateBoxCommand(TAP.Models.Factories.BIZ.BoxModel,System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "CREATE_BOX" command. 
            <para>This method deos not require any argument. It works in the following way: </para>
            </summary>
            <param name="box">Box</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateBox(TAP.Models.Factories.BIZ.BoxModel,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "CREATE_BOX" command. 
            <para>This method deos not require any argument. It works in the following way: </para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method set box status (Final status is "EMPTY").</para>
            </summary>
            <param name="box">Box</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CreateBoxID(TAP.Models.IndependentDefaultInfo,System.String,System.String@)">
            <summary>
            This method creates box ID.
            </summary>
            <param name="defaultInfo">BIZ Default Info</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Box ID</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.PackageCommand(TAP.ArgumentPack,System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>>
            This method executes "CREATE_BOX" command. 
            </summary>
            <param name="lot">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <returns>If 'TRUE', transaction is completed.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.PackageCommand(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String,TAP.ArgumentPack,System.String@)">
            <summary>
            This method executes "PACKAGE" command. This method prepare move to stock.
            <para>This method require box, and operation information in argument(Argument names are same as: "[BOX],[OPERATION]").</para>
            <para>
            Argument "OPERATION" is name of package operation in customner's site. <br/>
            </para>
            Final status of lot is "WAIT".
            <para>
            This method modifies follwoing tables: TAPBTLOT, TAPBTPRODUCT, TAPBTBOX
            </para>
            </summary>
            <param name="model">Lot</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="returnMsg">Return message which includes warning message</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Package(System.Collections.Generic.List{TAP.Models.Model},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,System.String@)">
            <summary>
            This method executes "PACKAGE" command. This method prepare move to stock
            <para>This method require box, and operation information in argument(Argument names are same as: "[BOX],[OPERATION]").</para>
            <para>Step1. This method validates argument and model</para>
            <para>Step2. This method loads creates box model.</para>
            <para>Step3. This method loads Operation Basic Info.</para>
            <para>Step4. This method checks model status and operation (Required satus is "WAIT").</para>
            <para>Step5. This method loads equipment and chamber information.</para>
            <para>Step6. This method collects model (lot or product) and executes "PACKAGE" command (Refer to "PackageLot" or "PackageProduct" method).</para>
            <para>Step7. This method changes box status.</para>
            <para>Step8. This method changes equipment and chamber status.</para>
            </summary>
            <param name="model">Model List</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.PackageLot(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Lot},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,TAP.Models.Factories.BIZ.BoxModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method loads products in lot.</para>
            <para>Step2. This method execute "PACKAGE" command (Refer to "PackageProduct" method).</para>
            <para>Step4. This method calls extension method for lot.</para>
            <para>Step5. This method assigns box id to lot and changes lot status.</para>
            </summary>
            <param name="lot"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="functionBasic"></param>
            <param name="box"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.PackageProduct(System.Collections.Generic.List{TAP.Models.Factories.BIZ.Product},System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,TAP.Models.Factories.BIZ.BoxModel,System.String@)">
            <summary>
            It works in the following way: 
            <para>Step1. This method checks whether Default Info of box and product are same (In loop).</para>
            <para>Step1. This method checks if product is passed this operation.</para>
            <para>Step2. This method creates operation information (In loop).</para>
            <para>Step3. This method calls extension method for product (In loop).</para>
            <para>Step4. This method calls extension method for lot.</para>
            <para>Step5. This method assigns box id to product and changes product status.</para>
            <para>Step6. This method assigns box id to lot and changes lot status.</para>
            </summary>
            <param name="products"></param>
            <param name="requester"></param>
            <param name="user"></param>
            <param name="comment"></param>
            <param name="argument"></param>
            <param name="events"></param>
            <param name="operationBasic"></param>
            <param name="equipment"></param>
            <param name="functionBasic"></param>
            <param name="box"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.CheckBoxAndProduct(TAP.Models.Factories.BIZ.BoxModel,TAP.Models.Factories.BIZ.Product,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks the consistency basic information of the product and the box.
            </summary>
            <param name="box">Box Model</param>
            <param name="product">Product Model</param>
            <param name="functionBasic">Product Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", basic information of product and box has consistency.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.SetboxInfo(TAP.Models.Factories.BIZ.BoxModel,TAP.Models.Factories.BIZ.Product,TAP.ArgumentPack)">
            <summary>
            This method set box information (Lot Code, Device, Grade and so on)
            </summary>
            <param name="box">Box</param>
            <param name="product">Product</param>
            <param name="argument">Argument for Extension or Override</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Package_SetLot(TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,TAP.Models.Factories.BIZ.BoxModel,System.String@)">
            <summary>
            For "PACKAGE" command, user can create extension code for lot using this method when customizing time. 
            </summary>
            <param name="lot">Lot Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function basic Info</param>
            <param name="box">Box Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflow.Package_SetProduct(TAP.Models.Factories.BIZ.Product,System.String,System.String,System.String,TAP.ArgumentPack,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.SystemBasic.FunctionBasicModel,TAP.Models.Factories.BIZ.BoxModel,System.String@)">
            <summary>
            For "PACKAGE" command, user can create extension code for product using this method when customizing time. 
            </summary>
            <param name="product">Product Model</param>
            <param name="requester">Requester Name</param>
            <param name="user">User Name</param>
            <param name="comment">Comment</param>
            <param name="argument">Argument Pack</param>
            <param name="events">Event</param>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="equipment">Equipment Model</param>
            <param name="functionBasic">Function basic Info</param>
            <param name="box">Box Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", user's extension contents work successfully</returns>
        </member>
        <member name="T:TAP.Workflow.Factory.FactoryConfigurationManager">
            <summary>
            This is factory configuration manager class.
            This class provides utility methods for facotry configuration.
            </summary>
        </member>
        <member name="P:TAP.Workflow.Factory.FactoryConfigurationManager.Instance">
            <summary>
            Static accessor of Factory Configuration Manager
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryConfigurationManager.instant">
            <summary>
            This is TapBase-Typed global varaiable.
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryConfigurationManager.#ctor">
            <summary>
            This is creator of Factory Configuration Manager
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryConfigurationManager.GetShift(System.Int32)">
            <summary>
            This method returns shift code
            </summary>
            <param name="currentHour">Current hour</param>
            <returns>Shift code</returns>
        </member>
        <member name="T:TAP.Workflow.Factory.FactoryOperationManager">
            <summary>
            This is factory operation manager class.
            This class controls Device Basic Information, Main Operation Basic Information and Operation Basic Information.
            </summary>
        </member>
        <member name="P:TAP.Workflow.Factory.FactoryOperationManager.Instance">
            <summary>
            Static accessor of Factory Operation Manager
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryOperationManager.instant">
            <summary>
            This is TapBase-Typed global varaiable.
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.#ctor">
            <summary>
            This is creator of Factory Operation Manager
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetDeviceBasicInfo(TAP.Models.Factories.BasicInfo.BasicInfoDefaultInfo)">
            <summary>
            This method creates and returns Device Basic Information using Basic Info Default Info.
            </summary>
            <param name="defaultInfo">Basic Info Default Info</param>
            <returns>Device Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetDeviceBasicInfo(TAP.Models.Factories.BIZ.BIZModel)">
            <summary>
            This method reates and returns Device Basic Information using BIZ Model.
            </summary>
            <param name="model">BIZ Model</param>
            <returns>Device Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetNextMainOperation(TAP.Models.Factories.BIZ.BIZModel)">
            <summary>
            This method calculates next main operation
            </summary>
            <param name="model">BIZ model</param>
            <returns>Next operation basic info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetPrevMainOperation(TAP.Models.Factories.BIZ.BIZModel,System.String)">
            <summary>
            This method calcuates previous main operation
            </summary>
            <param name="model">BIZ model</param>
            <param name="mainOP">Main Operation</param>
            <returns>Previous Main Operation Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetFirstMainOperation(TAP.Models.Factories.BIZ.BIZModel)">
            <summary>
            This method gets first main operation
            </summary>
            <param name="model">BIZ model</param>
            <returns>First Main operation</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetFirstMainOperation(System.String,System.String,System.String)">
            <summary>
            This method gets first main operation
            </summary>
            <param name="tech">Tech</param>
            <param name="lotCode">Lot code</param>
            <param name="device">Device</param>
            <returns>First Main operation</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetEndMainOperation(TAP.Models.Factories.BIZ.BIZModel)">
            <summary>
            This method gets final main operaiton
            </summary>
            <param name="model">BIZ model</param>
            <returns>Final main operation</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetEndMainOperation(System.String,System.String,System.String)">
            <summary>
            This method gets final main operation
            </summary>
            <param name="tech">Tech</param>
            <param name="lotCode">Lot code</param>
            <param name="device">Device</param>
            <returns>Final main operation</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetAbnormalMainOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.Models.Factories.EnumMainOPFlowType)">
            <summary>
            This method gets abnormal main operation specified
            </summary>
            <param name="model">BIZ model</param>
            <param name="flowType">Main operation flow type</param>
            <returns>Abnormal Main operation</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetPreviousMainOperationName(TAP.Models.Factories.BIZ.Lot)">
            <summary>
            This method find
            </summary>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetNextOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.EnumFlagYN)">
            <summary>
            This method calcuates next operation
            </summary>
            <param name="model">BIZ model</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Next Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetFirstOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.EnumFlagYN)">
            <summary>
            This method gets first operation of specified main operation.
            </summary>
            <param name="model">BIZ model</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>First Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetFirstOperation(TAP.Models.Factories.BasicInfo.MainOperationBasicInfo,TAP.EnumFlagYN)">
            <summary>
            This method gets first operation of specified main operation.
            </summary>
            <param name="mainOP">Main Operation Basic Info</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>First Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetEndOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.EnumFlagYN)">
            <summary>
            This method gets final operation of specfied main operation.
            </summary>
            <param name="model">BIZ model</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Final Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetEndOperation(TAP.Models.Factories.BasicInfo.MainOperationBasicInfo,TAP.EnumFlagYN)">
            <summary>
            This method gets final operation of specfied main operation.
            </summary>
            <param name="mainOP">Main Operation Basic Info</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Final Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetPrevOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.EnumFlagYN)">
            <summary>
            This method gets previous operation
            </summary>
            <param name="model">BIZ Model</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Previous Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.FindBackupPoint(TAP.Models.Factories.BIZ.BIZModel,TAP.Models.Factories.EnumFactoryCommand,TAP.EnumFlagYN)">
            <summary>
            This method find operation that occured specified event.
            </summary>
            <param name="model">BIZ Model</param>
            <param name="events">Event</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetCurrentOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.EnumFlagYN)">
            <summary>
            This method get current Operation.
            </summary>
            <param name="model">BIZ object</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Current Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetCurrentOperation(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.Facilities.EquipmentModel)">
            <summary>
            This method get current Operation.
            </summary>
            <param name="lot">Lot</param>
            <param name="equipment">Equipment</param>>
            <returns>Current Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetCurrentOperation(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.Facilities.CassetteModel)">
            <summary>
            This method get current Operation.
            </summary>
            <param name="lot">Lot</param>
            <param name="cassette">Cassette</param>
            <returns>Current Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetSpecifiedOperation(TAP.Models.Factories.BIZ.BIZModel,System.String)">
            <summary>
            This method get current Operation.
            </summary>
            <param name="model">BIZ Model</param>
            <param name="Operation">Operation</param>
            <returns>Specified Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetFirstOperationOfFirstMainOperation(System.String,System.String,System.String,TAP.EnumFlagYN)">
            <summary>
            This method gets first Operation of first main operation
            </summary>
            <param name="tech">Tech</param>
            <param name="lotCode">Lot code</param>
            <param name="device">Device</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>First Operation Basic Infoi</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetEndOperationOfEndMainOperation(System.String,System.String,System.String,TAP.EnumFlagYN)">
            <summary>
            This method gets final Operation of final main operation
            </summary>
            <param name="tech">Tech</param>
            <param name="lotCode">Lot code</param>
            <param name="device">Device</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Final Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetNextOperation(TAP.Models.Factories.BIZ.BIZModel,System.String,System.String,TAP.EnumFlagYN)">
            <summary>
            This method gets next Operation using line and area information
            </summary>
            <param name="model">BIZ object</param>
            <param name="line">Line</param>
            <param name="area">Area</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Next Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetLastNormalOperation(TAP.Models.Factories.BIZ.BIZModel,TAP.EnumFlagYN)">
            <summary>
            This method finds last normal operation of specified BIZ Model.
            This method will be used when model go out from abnormal operation.
            </summary>
            <param name="model">BIZ object</param>
            <param name="loadDetail">If 'YES', this function load nest models of operation</param>
            <returns>Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetPackageOperationInfo(TAP.Models.Factories.BIZ.BIZModel,System.String)">
            <summary>
            This method returns "Pakage" OperationBasicinfo.
            </summary>
            <param name="model">Model</param>
            <param name="packageOperationName">Packaging operation name</param>
            <returns>OperationBasicInfo</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryOperationManager.GetFabOutOperationInfo(TAP.ArgumentPack)">
            <summary>
            This method returns "Pakage" OperationBasicinfo.
            </summary>
            <param name="argument">Argument</param>
            <returns>OperationBasicinfo</returns>
        </member>
        <member name="T:TAP.Workflow.Factory.FactoryWorkflowBase">
            <summary>
            This class provides common members to workflow.
            </summary>
            <summary>
            This partial manages argument pack for transfer and movement.
            </summary>
            <summary>
            This partial checks status of lot, product, equipment and so on. 
            </summary>
            <summary>
            This partial extract lot information from cassette.
            </summary>
            <summary>
            This Partial manages status of cassette, equipment, chamber and workorder.
            </summary>
            <summary>
            This partial provides mothod for model and argument pack.
            </summary>
            <summary>
            This partial validates command and argument pack
            </summary>
            <summary>
            This partial manages the function basic information.
            </summary>
            <summary>
            This partial manages equipment, chamber and cassette information.
            </summary>
            <summary>
            This partial manages status of lots and cassette.
            </summary>
            <summary>
            This partial defines Constants
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._eventStartTime">
            <summary>
            Start time of Event
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._eventEndTime">
            <summary>
            End time of Event
            </summary>
        </member>
        <member name="P:TAP.Workflow.Factory.FactoryWorkflowBase.CommandArgumentList">
            <summary>
            Command argument list
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CreateInternalLotPack(TAP.Models.Factories.BIZ.Lot,System.String@)">
            <summary>
            This method makes Argument Pack of Lot that used in workflow.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.MakeMoveOutPack(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BasicInfo.OperationBasicInfo,System.String@)">
            <summary>
            This method makes Argument Pack for Lot-MoveOut.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="operationBasic">Operatoin Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.MakeMoveOutWithoutCassettePack(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BasicInfo.OperationBasicInfo,System.String@)">
            <summary>
            This method makes Argument Pack for Lot-MoveOut without cassette information.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="operationBasic">Operatoin Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.MakeMoveInPack(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BasicInfo.OperationBasicInfo,System.String@)">
            <summary>
            This method makes Argument Pack let lot move to specified opeartion.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="operationBasic">Operatoin Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.MakeMoveInWithoutCassettePack(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BasicInfo.OperationBasicInfo,System.String@)">
            <summary>
            This method makes Argument Pack let lot move to specified opeartion without cassette information.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="operationBasic">Operatoin Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.MakeSkipPack(TAP.Models.Factories.BIZ.Lot,System.String@)">
            <summary>
            This method makes Argument Pack for Skip.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.MakeCassettePack(System.String,System.String@)">
            <summary>
            This method makes Argument Pakc for cassette.
            </summary>
            <param name="cassetteName">Caseette Name</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckModelDuplicate(TAP.Models.Model,System.String@)">
            <summary>
            This method checks model-duplication.
            </summary>
            <param name="model">BIZ Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", specified model is not duplicated</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckModelExist(TAP.Models.Model,System.String@)">
            <summary>
            This method checks model exist or not.
            </summary>
            <param name="model">BIZ Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If  "TRUE", specified model exist.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckLotStatus(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.EnumFactoryStatus,System.String@)">
            <summary>
             This method checks if lot is in specified status.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="status">Status</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", lot is in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckLotStatus(TAP.Models.Factories.BIZ.Lot,System.Collections.Generic.List{TAP.Models.Factories.EnumFactoryStatus},System.String@)">
            <summary>
            This method checks if lot is in specified status list.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="status">Status List</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", lot is in specified status list.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckProductStatus(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.EnumFactoryStatus,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if products in lot are in specified status.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="status">Status</param>
            <param name="functionBasic">Function Basic Model - This define whether the product status needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", all products are in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckProductStatus(TAP.Models.Factories.BIZ.Product,TAP.Models.Factories.EnumFactoryStatus,System.String@)">
            <summary>
            This method checks if product is in specified status.
            </summary>
            <param name="product">Product Model</param>
            <param name="status">Status</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", product is in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckProductStatus(TAP.Models.Factories.BIZ.Lot,System.Collections.Generic.List{TAP.Models.Factories.EnumFactoryStatus},TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if products in lot are in specified status list.
            </summary>
            <param name="lot">Lot Model</param>
            <param name="status">Status List</param>
            <param name="functionBasic">Function Basic Model - This define whether the product status needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", all products are in specified status list.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckProductStatus(TAP.Models.Factories.BIZ.Product,System.Collections.Generic.List{TAP.Models.Factories.EnumFactoryStatus},TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if products is in specified status list.
            </summary>
            <param name="product">Product</param>
            <param name="status">Status List</param>
            <param name="functionBasic">Function Basic Model - This define whether the product status needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", all products are in specified status list.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckProductStatus(TAP.Models.Factories.BIZ.Product,System.Collections.Generic.List{TAP.Models.Factories.EnumFactoryStatus},System.String@)">
            <summary>
            This method checks if product is in specified status list.
            </summary>
            <param name="product">Product Model</param>
            <param name="status">Status List</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", product is in specified status list.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckEquipmentStatus(TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.BIZ.BIZModel,TAP.Models.Factories.EnumEquipmentStatus,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if equipment is in specified status.
            </summary>
            <param name="equipment">Equipment Model</param>
            <param name="model">BIZ Model</param>
            <param name="status">Status</param>
            <param name="functionBasic">Function Basic Model - This define whether the equipment status needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", equipment is in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckEquipmentStatus(TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.EnumEquipmentStatus,System.String@)">
            <summary>
            This method checks if equipment is in specified status.
            </summary>
            <param name="equipment">Equipment Model</param>
            <param name="status">Status</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", equipment is in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckCassetteStatus(TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.Factories.BIZ.Lot,System.Collections.Generic.List{TAP.Models.Factories.EnumCassetteStatus},TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if cassette is in specified status.
            </summary>
            <param name="cassette">Cassette Model</param>
            <param name="lot">Lot Model</param>
            <param name="status">Status</param>
            <param name="functionBasic">Function Basic Model - This define whether the cassette status needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", cassette is in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckCassetteStatus(TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.EnumCassetteStatus,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if cassette is in specified status.
            </summary>
            <param name="cassette">Cassette Model</param>
            <param name="lot">Lot Model</param>
            <param name="status">Status</param>
            <param name="functionBasic">Function Basic Model - This define whether the cassette status needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", cassette is in specified status.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckNumberOfProducts(TAP.Models.Factories.BasicInfo.DeviceBasicInfo,TAP.Models.Factories.BIZ.Lot,System.Int32,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if number of products in lot is more than lot capacity.
            </summary>
            <param name="deviceBasic">Device Basic Info</param>
            <param name="lot">Lot Model</param>
            <param name="numberOfArgument">Number of products</param>
            <param name="functionBasic">Function Basic Model - This define whether the number of products needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", number of products is less than lot capacity</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckChamberValidate(TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.BIZ.Lot,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if equipment has speficied chamber. If equipment has specified chamber, this method creates chamber model.
            </summary>
            <param name="equipment">Equipment Model</param>
            <param name="lot">Lot</param>
            <param name="chamberName">Chamber Name</param>
            <param name="functionBasic">Function Basic Model - This define whether the number of products needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", equipment has specified chamber</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckChamberStatus(TAP.Models.Factories.Facilities.ChamberModel,TAP.Models.Factories.BIZ.BIZModel,TAP.Models.Factories.EnumCassetteStatus,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if chamber is in specified status.
            </summary>
            <param name="chamber">Chamber Model</param>
            <param name="model">BIZ Model</param>
            <param name="status">Status</param>
            <param name="functionBasic">Function Basic Model - This define whether the chamber needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", chamber is in specified status</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckChamberStatus(TAP.Models.Factories.Facilities.ChamberModel,TAP.Models.Factories.EnumCassetteStatus,System.String@)">
            <summary>
            This method checks if chamber is in specified status.
            </summary>
            <param name="chamber">Chamber Model</param>
            <param name="status">Status</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", chamber is in specified status</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckRecipeValidation(TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.Factories.BIZ.Lot,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method checks if operation has specified recipe.
            </summary>
            <param name="operationBasic">Operation Basic Info</param>
            <param name="lot">lot</param>
            <param name="recipeName">Recipe Name</param>
            <param name="functionBasic">Function Basic Model - This define whether the chamber needs to be checked and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", operation has specified recipe</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckBoxStatus(TAP.Models.Factories.BIZ.BoxModel,TAP.Models.Factories.EnumFactoryStatus,System.String@)">
            <summary>
            This method checks if box in lot are in specified status.
            </summary>
            <param name="box">Lot Model</param>
            <param name="status">Status</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", box is in specified status list.</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CheckBoxStatus(TAP.Models.Factories.BIZ.BoxModel,System.Collections.Generic.List{TAP.Models.Factories.EnumFactoryStatus},System.String@)">
            <summary>
            This method checks if box in lot are in specified status list.
            </summary>
            <param name="box">Lot Model</param>
            <param name="status">Status List</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", box is in specified status list.</returns>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.GetFirstLotInCassette(TAP.Models.Factories.Facilities.CassetteModel,System.String,System.String@)">
            <summary>
            This method extract first lot of specified cassette.
            </summary>
            <param name="cassette">Cassette Model</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>First Lot Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.GetLotStatusFromCassette(TAP.Models.Factories.Facilities.CassetteModel,System.String,System.String@)">
            <summary>
            This moethod extract lot status of specified cassette. 
            </summary>
            <param name="cassette">Cassette Model</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Lot Status</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.GetIDDigit(System.String,System.String@)">
            <summary>
            This class does not support this method.
            </summary>
            <param name="bizObject"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.GetIDMaxNumber(System.String,System.String,System.String,System.String@)">
            <summary>
            This class does not support this method.
            </summary>
            <param name="bizObject"></param>
            <param name="subCode"></param>
            <param name="user"></param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns></returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.SetCassette(TAP.Models.Factories.Facilities.CassetteModel,TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.EnumCassetteStatus,TAP.Models.Factories.EnumFactoryCommand,System.String,TAP.Models.Factories.BIZ.Lot,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method changes Cassette status.
            </summary>
            <param name="cassette">Cassette Model</param>
            <param name="equipment">Equipment model</param>
            <param name="status">Using Status</param>
            <param name="events">Event</param>
            <param name="comment">Comment</param>
            <param name="lot">Lot Name</param>
            <param name="user">User</param>
            <param name="functionBasic">Function Basic Model - This define whether the cassette status needs to be changed and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.SetEquipment(TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.EnumEquipmentStatus,TAP.Models.Factories.EnumEquipmentEvent,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,System.String,System.String,System.String,TAP.Models.Factories.BIZ.Lot,System.String,System.String@)">
            <summary>
            This method changes equpemt status. 
            </summary>
            <param name="equipment">Equipment Model</param>
            <param name="status">Status</param>
            <param name="events">Event</param>
            <param name="recipe">Recipe </param>
            <param name="workOrderName">Workorder Name</param>
            <param name="comment">Comment</param>
            <param name="user">User</param>
            <param name="lot">Lot</param>
            <param name="product">Product Name</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.SetEquipment(TAP.Models.Factories.Facilities.EquipmentModel,TAP.Models.Factories.EnumEquipmentStatus,TAP.Models.Factories.EnumEquipmentEvent,TAP.Models.Factories.BasicInfo.RecipeBasicInfo,System.String,System.String,System.String,TAP.Models.Factories.BIZ.Lot,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method changes equpemt status. 
            </summary>
            <param name="equipment">Equipment Model</param>
            <param name="status">Status</param>
            <param name="events">Event</param>
            <param name="recipe">Recipe Name</param>
            <param name="workOrderName">Workorder Name</param>
            <param name="comment">Comment</param>
            <param name="user">User</param>
            <param name="lot">Lot Name</param>
            <param name="product">Product Name</param>
            <param name="functionBasic">Function Basic Model - This define whether the equpment status needs to be changed and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument pack list for transaction</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.SetChamber(TAP.Models.Factories.Facilities.ChamberModel,TAP.Models.Factories.BIZ.Lot,System.String,System.String,System.String,TAP.Models.Factories.EnumCassetteStatus,TAP.Models.Factories.EnumEquipmentEvent,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method changes chamber status.
            </summary>
            <param name="chamber">Chamber Model</param>
            <param name="lot">Lot name</param>
            <param name="productName">Product name</param>
            <param name="workOrdername">Work order name</param>
            <param name="comment">Comment</param>
            <param name="status">Status</param>
            <param name="events">Events</param>
            <param name="user">User</param>
            <param name="functionBasic">Function Basic Model - This define whether the chamber status needs to be changed and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument pack list</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.SetWorkOrder(TAP.Models.Factories.BIZ.WorkOrderModel,TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.EnumFactoryCommand,TAP.Models.Factories.Facilities.EquipmentModel,System.String,System.String,System.String@)">
            <summary>
            This method changes work order status.
            </summary>
            <param name="workOrder">Work order</param>
            <param name="lot">Lot</param>
            <param name="events">Events</param>
            <param name="equipment">Equipment</param>
            <param name="comment">Comment</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument pack list</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.CreateDefaultInfo(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            This methods create default information for Model
            </summary>
            <param name="defaultInfoItem">Default Items</param>
            <param name="modelLevel">Modell Level</param>
            <returns>BIZ Default Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.SetCommandArgumentList">
            <summary>
            This method arranges argument list for correspoding workflow command for validating argument in command methods.
            </summary>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ConvertToArgumentPack(System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            This method creates Argument Pack for specified command
            </summary>
            <param name="command">Command</param>
            <param name="arguments">Argument values</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Argument Pack</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ExtractLotDefaultInfo(TAP.Models.Factories.BIZ.Product,System.String@)">
            <summary>
            This method extracts Lot Default information.
            </summary>
            <param name="product">Product Model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>BIZ Default Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ViewModel(TAP.Models.Model)">
            <summary>
            This model display model information on console.
            </summary>
            <param name="model">Model</param>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ConvertArgumentPackToModel(TAP.ArgumentPack,System.String@)">
            <summary>
            This method create model using argument pack
            </summary>
            <param name="argument">Argument pack for model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ConvertArgumentPackToBasicInfoModel(TAP.ArgumentPack,System.String@)">
            <summary>
            This method create Basic Info model using argument pack
            </summary>
            <param name="argument">Argument pack for basic info model</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Basic Info Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ValidateArguments(TAP.Models.Factories.EnumFactoryCommand,TAP.ArgumentPack,System.String@)">
            <summary>
            This method validates argument pack using command.
            This method checks number of arguments and validate each argument
            </summary>
            <param name="command">Command</param>
            <param name="arguments">Argument Pack</param>
            <param name="returnMsg">Return message</param>
            <returns>If "TRUE", argument is valid</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadFunctionBasicInfo(System.String,System.String@)">
            <summary>
            This method loads Function Basic Info
            </summary>
            <param name="functionName">Function name</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Function Basic Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadEquipmentModel(System.String,TAP.Models.Factories.BIZ.BIZModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method loads equipment information.
            </summary>
            <param name="equipmentName">Equipment Name</param>
            <param name="model">BIZ Model</param>
            <param name="functionBasic">Function Basic Model - This define whether the equipment information needs to be loaded and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Equipment Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadEquipmentModel(System.String,System.String@)">
            <summary>
            This method load equipment information.
            </summary>
            <param name="equipmentName">Equipment Name</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Equipment Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadCassetteModel(System.String,TAP.Models.Factories.BIZ.BIZModel,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method loads cassette information.
            </summary>
            <param name="cassetName">Cassette Name</param>
            <param name="model">BIZ Model</param>
            <param name="functionBasic">Function Basic Model - This define whether the cassette information needs to be loaded and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Cassette Mdoel</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadCassetteModel(System.String,System.String,System.String@)">
            <summary>
            This method loads cassette information.
            </summary>
            <param name="cassetteName">Cassette Name</param>
            <param name="lotName">Lot Name</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Cassette Mdoel</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadChamber(TAP.Models.Factories.Facilities.FacilityDefaultInfo,TAP.Models.Factories.BIZ.BIZModel,System.String,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method loads chamber information
            </summary>
            <param name="defaultInfo">Default Information</param>
            <param name="model">BIZ Model</param>
            <param name="chamberName">Chamber name</param>
            <param name="functionBasic">Function Basic Model - This define whether the chamber information needs to be loaded and contains filtering information for device and equipment.</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Chamber Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadChamber(TAP.Models.Factories.Facilities.FacilityDefaultInfo,System.String,System.String@)">
            <summary>
            This method loads chamber information
            </summary>
            <param name="defaultInfo">Default Information</param>
            <param name="chamberName">Chamber name</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Chamber Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadProductUsingModuleID(System.String,System.String,System.String@)">
            <summary>
            This method loads product using module ID
            </summary>
            <param name="moduleID">Module ID</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Product Model</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.LoadPreviousOperationBasic(TAP.Models.Factories.BIZ.Lot,TAP.Models.Factories.BasicInfo.OperationBasicInfo,TAP.Models.SystemBasic.FunctionBasicModel,System.String@)">
            <summary>
            This method find preivous operation basic info
            </summary>
            <param name="lot">Lot</param>
            <param name="currentOperationBasic">Current Operation Basic Info</param>
            <param name="functionBasic">Function Basic Info</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>Operation Basic Info</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ConfirmCassettteStatus(System.String,System.String,System.String@)">
            <summary>
            This method checks that all lots in the cassettee are in the same status.
            </summary>
            <param name="cassette">Cassette name</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", all lot of cassette have same status</returns>
        </member>
        <member name="M:TAP.Workflow.Factory.FactoryWorkflowBase.ConfirmCassettteStatus(System.String,TAP.Models.Factories.BIZ.Lot,System.String,System.String@)">
            <summary>
            This method checks that all lots in the cassettee are in the same status.
            </summary>
            <param name="cassette">Cassette name</param>
            <param name="lot">Curent lot</param>
            <param name="user">User</param>
            <param name="returnMsg">Return message which includes warning message</param>
            <returns>If "TRUE", all lots in cassette have same status</returns>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_PRODUCT_CHECK_COUNT">
            <summary>
            String constant for number of products checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_PRODUCT_CHECK_SATATUS">
            <summary>
             String constant for product status checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_PARTSUBTYPE_CHECK">
            <summary>
            String constant for part sub type checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_EQUIPMENT_CHECK_SATATUS">
            <summary>
            String constant for equipment status checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_EQUIPMENT_LOAD">
            <summary>
            String constant for equipment loading
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_EQUIPMENT_UPDATE_SATATUS">
            <summary>
            String constant for equipment status updating
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_CHAMBER_CHECK_SATATUS">
            <summary>
            String constant for chamber status checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_CHAMBER_LOAD">
            <summary>
            String constant for Chamber loading
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_CHAMBER_UPDATE_STATUS">
            <summary>
            String constant for Chamber status updating
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_CASSETTE_CHECK_STATUS">
            <summary>
            String constant for Cassette status checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_CASSETTE_LOAD">
            <summary>
            String constant for Cassettet loading
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_CASSETTE_UPDATE">
            <summary>
            String constant for Cassette status updating
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_RECIPE_LOAD">
            <summary>
            String constant for Recipe loading
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_MODELEXIST_CHECK_SKIP">
            <summary>
            String constant for Model exsiting check skipping
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_TRACKIN_CHECK_SKIP">
            <summary>
            String constant for Track in check skipping
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_OPERATION_CHECK_PREV">
            <summary>
            String consatants for previous operation checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_OPERATION_DETAIL_LOAD">
            <summary>
            If 'YES', function loads nest models of OperationBasicInfo
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_OPERATION_ALLOW_BREAKIN">
            <summary>
            If 'YES', function allow lot which is breaked in.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._FC_BOX_CHECK_PRODUCT">
            <summary>
            String consatants for box-product checking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_COMMAND_COVERT_MSG">
            <summary>
            Trace message for user command converting
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_COMMAND_START_MSG">
            <summary>
            Trace message for executing workflow starting. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_EXECUTION_START_MSG">
            <summary>
            Trace message for command execution starting. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_ARGUMENT_CHECK_MSG">
            <summary>
            Trace message for argument cheking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_ARGUMENT_CHECKEND_MSG">
            <summary>
            Trace message for argument cheking
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_TRANSACTION_START_MSG">
            <summary>
            Trace message for Transaction starting
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_TRANSACTION_END_MSG">
            <summary>
            Trace message for Transaction ending
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_NEXTSTEP_GET_MSG">
            <summary>
            Trace message for Next operation inforamtion loading
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_DEFAULTINFO_CREATE_MSG">
            <summary>
            Trace message for Default information creating
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_MODEL_CHECK_MSG">
            <summary>
            Trace message for model status checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_MODEL_CREATE_COMPLETE_MSG">
            <summary>
            Trace message for model creating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_MODEL_SET_STATUS_MSG">
            <summary>
            Trace message for model status setting
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_DEVICEBASICINFO_LOAD_MSG">
            <summary>
            Trace message for device basic information loading. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_OPERATIONBASIC_LOAD_MSG">
            <summary>
            Trace message for operation basic information loading
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_PRODUCT_CHECK_COUNT_MSG">
            <summary>
            Trace message for numer of products checking. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_PRODUCT_CHECK_MSG">
            <summary>
            Trace message for product checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_OPERATION_CHECK_MSG">
            <summary>
            Trace message for operation checking. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_PART_CHECK_MSG">
            <summary>
            Trace message for part checking. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_EQUIPMENT_LOAD_MSG">
            <summary>
            Trace message for equipment information loading. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_EQUIPMENT_UPDATE_MSG">
            <summary>
            Trace message for equipment information updating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_EQUIPMENT_CHECK_MSG">
            <summary>
            Trace message for equipment information checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_EQUIPMENT_FIND_MSG">
            <summary>
            Trace message for next equipment information. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CHAMBER_LOAD_MSG">
            <summary>
            Trace message for chamber information loading. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CHAMBER_UPDATE_MSG">
            <summary>
            Trace message for chamber information updating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CHAMBER_CHECK_MSG">
            <summary>
            Trace message for chamber information checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CHAMBER_VALIDATE_MSG">
            <summary>
            Trace message for chamber information validating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_RECIPE_LOAD_MSG">
            <summary>
            Trace message for recipe information loading. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_RECIPE_UPDATE_MSG">
            <summary>
            Trace message for recipe information updating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_RECIPE_CHECK_MSG">
            <summary>
            Trace message for recipe information checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_RECIPE_VALIDATE_MSG">
            <summary>
            Trace message for recipe information validating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CASSTTE_CHECK_MSG">
            <summary>
            Trace message for cassette checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CASSETTE_LOAD_MSG">
            <summary>
            Trace message for cassette information loading. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_CASSETET_UPDATE_MSG">
            <summary>
            Trace message for cassette information updating. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._TRACE_BOX_CHECK_MSG">
            <summary>
            Trace message for box checking. This message requires 1 argument.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_DIGIT_CONFIG_INVALID">
            <summary>
            Warning message for Invalid Configuration. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_ID_CODE_INVALID">
            <summary>
            Warning message for Invalid ID Code. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_ARGUMENT_NOT_MATCH">
            <summary>
            Warning message for Argument missmatching
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_ARGUMENT_NOT_SET">
            <summary>
            Warning message for No Argument Set. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_ARGUMENT_IS_NULL">
            <summary>
            Warning message for Null Argument
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_METHOD_HAVE_NO_CASE">
            <summary>
            Warning message for No Function Case. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_COMMAND_CHECK">
            <summary>
            Warning message for Invalid Caommand. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_WORKORDER_DUPLICATE">
            <summary>
            Warning message for Duplicated Workorder. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_WORKORDER_NOT_EXIST">
            <summary>
            Warning message for No Workorder. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_WORKORDER_REQUIRED">
            <summary>
            Warning message for Requiring Workorder. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_CHECK_STATUS">
            <summary>
            Warning message for Model Status Missmatching. This message requires 3 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_DUPLICATE">
            <summary>
            Warning message for Duplicated Model. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_NOT_SPECIFIED">
            <summary>
            Warning message for No Specified Model
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_NOT_EXSIT">
            <summary>
            Warning message for No Model. This message requires 1 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_NOTE_SPECIFIED">
            <summary>
            Warning message for Model Specifying. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_DEFAULTINFO_NOT_MATCH">
            <summary>
            Warning message for Missmatching Default info. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_SAME">
            <summary>
            Warning message for same model.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_MODEL_NO_HISTORY">
            <summary>
            Warning message for no history case
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_ONLY">
            <summary>
            Warning message for LOT ONLY
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_AUTO_TRACKOUT">
            <summary>
            Warning message for AUTO TRACKOUT
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_BASE_PROCESSING_">
            <summary>
            Warning message for Lot-Base Processing. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_EPMPTY">
            <summary>
            Warning message for Empty Lot. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_PRODUCT_STEP_NOT_MATCH">
            <summary>
            Warning message for Mismatching Step between Lot and Product. This message requires 3 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_NOT_INCLUDE_PRODUCT">
            <summary>
            Warning message for NOT Included Product. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_EQUIPMENT_NOT_MATCH">
            <summary>
            Warning message for Mismatching Equipment. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_LOT_STATUS_NOT_MATCH">
            <summary>
            Warning message for Mismatching Lot Status. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PRODUCT_STEP_NOT_MATCHED">
            <summary>
            Warning message for Missmatching Step of Product in Lot
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PRODUCT_NOT_TRACKOUT">
            <summary>
            Warning message for Product NOT Trackout. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PRODUCT_OVER_COUNT">
            <summary>
            Warning message for Over Lot Capacity. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PRODUCT_BASE_PROCESSING">
            <summary>
            Warning message for Product-Base Processing. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PRODUCT_MOVE_OUT_NOT_ALLOWED">
            <summary>
            Warning message for Can Not Product MoveOut
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PRODUCT_MOVEOPERATION_NOT_ALLOWED">
            <summary>
            Warning message for Can Not Product Move Step
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATION_NOT_FOUND_PREV">
            <summary>
            Warning message for can not find previous operation
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATION_NOT_FOUND">
            <summary>
            Warning message for can not find current operation
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PART_INVALID">
            <summary>
             Warning message for Invalid Part. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PART_SUBTYPE_INVALID">
            <summary>
             Warning message for Invalid Part Sub Type. This message requires 4 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PART_ASSEMBED">
            <summary>
             Warning message for Already Assembled. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PART_REQUIRED">
            <summary>
             Warning message for Part Requirement. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PART_NOT_ASSEMBLED">
            <summary>
            Warning message for No Parts Assembled. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PARAMETER_MEASURED">
            <summary>
            Warning message for Already Measured. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PARAMETER_REQUIRED">
            <summary>
            Warning message for Measurement Requirement. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_DEFECT_NOT_EXIST">
            <summary>
            Warning message for No Defect Information
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_DEFECT_INFO_INVALID">
            <summary>
            Warning message for Invalid Defect Information. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATION_CHECK">
            <summary>
            Warning message for Invalid Operation. This message requires 3 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATION_DUPLICATE">
            <summary>
            Warning message for Duplicated Operation. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATION_NOT_MATCH">
            <summary>
            Warning message for Missmatching operation between Lot and Product. This message requires 3 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATIONBASIC_INVALID">
            <summary>
            Warning message for Invalid Operation Basic Information. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_OPERATION_PREV_NOT_PROCESS">
            <summary>
            Warning message for _WARNING_OPERATION_PREV_NOT_PROCESS. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_RECIPE_NOT_EXIST">
            <summary>
            Warning message for No Recipe. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_RECIPE_INVALID">
            <summary>
            Warning message for Invalid Recipe. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PARTBASIC_NOT_EXIST">
            <summary>
            Warning message for No Part Basic Information. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_PARAMETERBASIC_NOT_EXIST">
            <summary>
            Warning message for Parameter Basic Information. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_EQUIPMENT_NOT_EXIST">
            <summary>
            Warning message for No Equipment Information
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_EQUIPMENT_IDLE_NOT_EXIST">
            <summary>
            Warning message for No Idle Equipment. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_EQUIPMENT_CAN_NOT_FOUND">
            <summary>
            Warning message for Equipment NOT Found
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_NEXTEQUIPMENT_CAN_NOT_FOUND">
            <summary>
            Warning message for Next Equipment NOT Found
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_NEXTEQUIPMENT_NO_AREA">
            <summary>
            Warning message for Next Equipment NOT Found
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_CHAMBER_NOT_EXIST">
            <summary>
            Warning message for No Chamber This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_CHAMBER_INVALID">
            <summary>
            Warning message for Invalid Chamber. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_CHAMBER_CHECK_STATUS">
            <summary>
            Warning message for Invalid Chamber Status. This message requires 3 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_CASSETTE_NOT_SPECIFIED">
            <summary>
            Warning message for No Cassette Information. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_CASSETTE_SAME">
            <summary>
            Warning message for assgined cassette is same.
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_TRACKIN_INVALID">
            <summary>
            Warning message for Invalid Trackin Information. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_TRACKIN_NOT_EXIST">
            <summary>
            Warning message for Invalid Trackin Information NOT Found. This message requires 1 argument. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_STOCK_PRODUCT_MISSMATCH">
            <summary>
            Warning message for Missmatching Product In Stock. This message requires 5 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._WARNING_STOCK_PRODUCT_PACKAGED">
            <summary>
            Warning message for Already Packing. This message requires 2 arguments. 
            </summary>
        </member>
        <member name="F:TAP.Workflow.Factory.FactoryWorkflowBase._UTIL_NO_ARGUMENT_REQUIRED">
            <summary>
            Util Constant for NO Argument Required
            </summary>
        </member>
    </members>
</doc>
