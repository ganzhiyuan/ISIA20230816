<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TAP.Data.DataBase</name>
    </assembly>
    <members>
        <member name="T:TAP.Data.DataBase.Communicators.DBCommunicator">
            <summary>
            This class supports user's command executing on DBMS instance. <br/>
            Methods of this class executes user's command on connection that defiend in DBMS instance.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.#ctor">
            <summary>
            This creates a intance of this class.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Select(System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="tableName">Table name for saving data</param>
            <param name="arguments">Argument list</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Select(System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="procedureName">Procedure name</param>
            <param name="tableName">Table name for saving data</param>
            <param name="arguments">Argument list</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Select(System.String)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">Query string</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Select(System.String,System.String)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">Query string</param>
            <param name="tableName">Table name</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String,TAP.ArgumentPack,System.Boolean)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <param name="needTransaction">If TRUE, this method execute user command with distributed transaction.</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String,TAP.ArgumentPack[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="procedureName">Prefix of procedure name</param>
            <param name="arguments">Argument list array</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String,System.String,TAP.ArgumentPack[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String,System.Collections.Generic.List{TAP.ArgumentPack})">
            <summary>
            This method executs user's query and returns result as instance of DataSet. <br/>
            This method does not support generic type.
            </summary>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String,System.String,System.Collections.Generic.List{TAP.ArgumentPack})">
            <summary>
            This method exeuctes user's non-query command.<br/>
            This method does not support generic type.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.String[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command string</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.Save(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command string</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.SaveWithPamameter(System.String,TAP.ArgumentPack)">
            <summary>
            This method exeuctes user's non-query command with specifed parameters.
            </summary>
            <param name="query">SQL</param>
            <param name="args">Parameters</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicator.SaveWithoutTransaction(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's non-query command without transaction.
            </summary>
            <param name="query">Command string</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="T:TAP.Data.DataBase.Communicators.DBCommunicatorCustom">
            <summary>
            This class supports user's command executing on independent connection.
            </summary>
        </member>
        <member name="P:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.IsConnected">
            <summary>
            If 'TRUE', Database is conncted.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.#ctor(TAP.Data.DataBase.EnumDBMS,System.String,System.String,System.String)">
            <summary>
            This creates a intance of this class.
            </summary>
            <param name="dbms">DBMS</param>
            <param name="tns">TNS name</param>
            <param name="user">User</param>
            <param name="password">Password</param>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Select(System.String,System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="tableName">Table name for saving data</param>
            <param name="arguments">Argument list</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Select(System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="procedureName">Procedure name</param>
            <param name="tableName">Table name for saving data</param>
            <param name="arguments">Argument list</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Select(System.String)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">Query string</param>
            <returns>DataSet  object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String,System.String,TAP.ArgumentPack)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String,TAP.ArgumentPack,System.Boolean)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <param name="needTransaction">If TRUE, this method execute user command with distributed transaction.</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String,TAP.ArgumentPack[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="procedureName">Prefix of procedure name</param>
            <param name="arguments">Argument list array</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String,System.String,TAP.ArgumentPack[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String,System.Collections.Generic.List{TAP.ArgumentPack})">
            <summary>
            This method executs user's query and returns result as instance of DataSet. <br/>
            This method does not support generic type.
            </summary>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String,System.String,System.Collections.Generic.List{TAP.ArgumentPack})">
            <summary>
            This method exeuctes user's non-query command.<br/>
            This method does not support generic type.
            </summary>
            <param name="packageName">Package name</param>
            <param name="procedureName">Procedure name</param>
            <param name="arguments">Argument list</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Communicators.DBCommunicatorCustom.Save(System.String[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command string</param>
            <returns>Numer of rows applied</returns>
        </member>
        <member name="T:TAP.Data.DataBase.Database">
            <summary>
            This class support the database connection.<br/>
            A class that interacts with DBMS class must be derived from this class.
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.Database._executer">
            <summary>
            Ojbect that communicate with DBMS
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.Database.#ctor">
            <summary>
            This  creates an instance of this class.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.Database.#ctor(TAP.Data.DataBase.EnumDBMS,System.String)">
            <summary>
            This  creates an instance of this class.
            </summary>
            <param name="dbms">Kind of DBMS</param>
            <param name="connectionKey">DBMS identificator</param>
        </member>
        <member name="M:TAP.Data.DataBase.Database.#ctor(TAP.Data.DataBase.EnumDBMS,System.String,System.String,System.String)">
            <summary>
            This  creates an instance of this class.
            </summary>
            <param name="dbms">Kind of DBMS</param>
            <param name="tns">TNS name</param>
            <param name="user">User</param>
            <param name="password">Password</param>
        </member>
        <member name="M:TAP.Data.DataBase.Database.Initialize(TAP.Data.DataBase.EnumDBMS,System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This method initializes the executer.
            </summary>
            <param name="argDBMS">Kind of DBMS</param>
            <param name="argConnectionKey">DBMS identificator</param>
            <param name="connMethod">Connection method</param>
        </member>
        <member name="T:TAP.Data.DataBase.DatabaseCreator">
            <summary>
            This class creates the instance of DBMS that user specified.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DatabaseCreator.#ctor">
            <summary>
            This creates an instance of this class.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DatabaseCreator.CreateDataBase(TAP.Data.DataBase.EnumDBMS,System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This method creates the DBMS-specifed object that is derived from Database.
            </summary>
            <param name="dbms">Kind of DBMS</param>
            <param name="connectionKey">DBMS identificator</param>
            <param name="connMethod">Connection method</param>
            <returns></returns>
        </member>
        <member name="T:TAP.Data.DataBase.DataExecuter">
            <summary>
            This class provides database commands.
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.DataExecuter._dbms">
            <summary>
            연동하는 DBMS 종류
            </summary>
        </member>
        <member name="P:TAP.Data.DataBase.DataExecuter.IsConncted">
            <summary>
            If 'TRUE', DBMS is conncted
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.#ctor(TAP.Data.DataBase.EnumDBMS,System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This creates an instance of this class.
            </summary>
            <param name="dbms">Kind of DBMS</param>
            <param name="connectionKey">DBMS identifactor</param>
            <param name="connMethod">Connection method</param>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteNonQuery(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command text</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteNonQuery(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command text</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="sqls">Command lilst</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteNonQueryWithoutTransaction(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's non-query command without transaction.
            </summary>
            <param name="sqls">Command lilst</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteNonQuery(System.String[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="sqls">Command lilst</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteScalar(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteScalar(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteScalar(System.String,TAP.ArgumentPack)">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteScalar(System.String)">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>>
            <param name="query">SQL</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteReader(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executes user's query command and returns result as DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Insatance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteReader(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executes the user's query command and returns result as DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Insatance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteReader(System.String,System.Data.IDataParameter[])">
            <summary>
            This method executes user's query command and returns result as DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <returns>DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteReader(System.String,TAP.ArgumentPack)">
            <summary>
            This method executes user's query command and returns result as DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <returns>DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.ExecuteReader(System.String)">
            <summary>
            This method executes user's query command and returns result as DataReader object.
            </summary>
            <param name="query">SQL</param>
            <returns>DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query command and returns result as DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query command and returns result as DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[])">
            <summary>
            This method executs user's query command and returns result as DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
        </member>
        <member name="M:TAP.Data.DataBase.DataExecuter.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack)">
            <summary>
            This method executs user's query command and returns result as DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
        </member>
        <member name="T:TAP.Data.DataBase.DBMS">
            <summary>
            This is abstract class of DBMS-specified classes.
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.DBMS.dbConnection">
            <summary>
            Connection object
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.DBMS.dbCommand">
            <summary>
            Command object
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.DBMS.dbAdapter">
            <summary>
            Adapter object
            </summary>
        </member>
        <member name="P:TAP.Data.DataBase.DBMS.IsConnected">
            <summary>
            If 'TRUE', DBMS has been connected
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.#ctor">
            <summary>
            This creates an instance of this class.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.LoadConnectionString(System.String)">
            <summary>
            This method loads the DB connection information from FXConfig or APPConfig.
            </summary>
            <param name="argConnectionKey">DB  Key</param>
            <returns>DB connection information</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteNonQuery(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteNonQuery(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="query">Command</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="sql">command test list</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteNonQuery(System.String[])">
            <summary>
            This method exeuctes user's non-query command.
            </summary>
            <param name="sql">command test list</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteNonQueryWithOutTransaction(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's non-query command without transaction.
            </summary>
            <param name="sql">command test list</param>
            <returns>>Number of rows applied</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteScalar(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteScalar(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query command and returns first column of first row.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>First column value of first row of result</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.OpenConnection">
            <summary>
            This method connects to DBMS
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.CloseConnection">
            <summary>
            This method disconnects from DBMS.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.SetCommand(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method assigns each parameters to instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argParameterArray">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.SetCommand(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method assigns each parameters to instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argArgumentPack">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteReader(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as DataReader.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Instance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.ExecuteReader(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as DataReader.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Instance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.SetParameter(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argParameterArray">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.SetParameter(System.Data.IDbCommand,TAP.ArgumentPack)">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argArgumentPack">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.DBMS.Deriveparameters(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            This method loads parameter information from database.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argConnection">Instance of Connection object</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="T:TAP.Data.DataBase.EnumDBMS">
            <summary>
            This enumeratior is kind of DBMS.
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumDBMS.MSSQL">
            <summary>
            MS-SQL
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumDBMS.ORACLE">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumDBMS.DB2">
            <summary>
            IBM DB2
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumDBMS.MDB">
            <summary>
            MDB
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumDBMS.SQLITE">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="T:TAP.Data.DataBase.EnumConnectionMethod">
            <summary>
            This enumeratior is kind of connection method
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumConnectionMethod.CONNECTION_KEY">
            <summary>
            Using connection key with configuration file
            </summary>
        </member>
        <member name="F:TAP.Data.DataBase.EnumConnectionMethod.CONNECTION_STRING">
            <summary>
            Using connection string without configuration file
            </summary>
        </member>
        <member name="T:TAP.Data.DataBase.MDB">
            <summary>
            This is implemted class of DBMS for MDB.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.#ctor(System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This creates an instance of this class.
            </summary>
            <param name="connectionKey">Connection key</param>
            <param name="connMethod">Method of connection</param>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.SetCommand(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method is not supported in this class
            </summary>
            <param name="argQuery"></param>
            <param name="argArgumentPack"></param>
            <param name="argCommandType"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.SetCommand(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method is not supported in this class
            </summary>
            <param name="argQuery"></param>
            <param name="argParameterArray"></param>
            <param name="argCommandType"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.ExecuteReader(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method is not supported in this class
            </summary>
            <param name="query"></param>
            <param name="argumentPack"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.ExecuteReader(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method is not supported in this class
            </summary>
            <param name="query"></param>
            <param name="parameterArray"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.SetParameter(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argParameterArray">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.SetParameter(System.Data.IDbCommand,TAP.ArgumentPack)">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argArgumentPack">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.MDB.Deriveparameters(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            This method assigns parameter list of stored procedure to instance of command object.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argConnection">Instance of Connection object</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="T:TAP.Data.DataBase.OracleDBMSWithODP">
            <summary>
            This is implemted class of DBMS for Oracle.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.#ctor(System.Object,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This creates an instance of this class.
            </summary>
            <param name="connectionKey">Connection key</param>
            <param name="connMethod">Method of connection</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.Initialize(System.Object,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This method initialized object.
            </summary>
            <param name="argConnectionKey">Connection Key</param>
            <param name="connMethod">Connection Method</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.SetCommand(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method sets instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argParameterArray">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.SetCommand(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method sets instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argArgumentPack">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.ExecuteReader(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as instance of DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Insatance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.ExecuteReader(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as instance of DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Insatance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.GetDataSet(System.Data.DataSet@,System.String)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="argDs">DataSet object for saving result tables</param>
            <param name="argTableName">Table name for saving result</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.Deriveparameters(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            This method assigns parameter list of stored procedure to instance of command object.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argConnection">Instance of Connection object</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.SetParameter(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argParameterArray">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.SetParameter(System.Data.IDbCommand,TAP.ArgumentPack)">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argArgumentPack">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.GetOracleDbType(System.String)">
            <summary>
            This method convert .NET data type to Oracle data type.
            </summary>
            <param name="argTypeName">Type name</param>
            <returns>OracleDbType</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.SetDefaultValue(Oracle.ManagedDataAccess.Client.OracleParameter)">
            <summary>
            This method assign default value to oracle parameters.
            </summary>
            <param name="argParameter">Parameter</param>
            <returns>Default value</returns>
        </member>
        <member name="M:TAP.Data.DataBase.OracleDBMSWithODP.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
            <summary>
            This method exeuctes user's command.
            </summary>
            <param name="sql">Command lilst</param>
            <returns>Number of rows applied</returns>
        </member>
        <member name="T:TAP.Data.DataBase.SqlDBMS">
            <summary>
            This is implemted class of DBMS for SQL Server.
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.#ctor(System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This creates an instance of this class.
            </summary>
            <param name="connectionKey">Connection key</param>
            <param name="connMethod">Method of connection</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.Initialize(System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This initializes object.
            </summary>
            <param name="argConnectionKey">Connection Key</param>
            <param name="connMethod">Connection Method</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.SetCommand(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method sets instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argParameterArray">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.SetCommand(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method sets instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argArgumentPack">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.ExecuteReader(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as instance of DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Insatance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.ExecuteReader(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executes user's query and returns result as instance of DataReader object.
            </summary>
            <param name="query">SQL</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
            <returns>Insatance of DataReader object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.GetDataSet(System.Data.DataSet@,System.String)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="argDs">DataSet object for saving result tables</param>
            <param name="argTableName">Table name for saving result</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.SetParameter(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argParameterArray">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.SetParameter(System.Data.IDbCommand,TAP.ArgumentPack)">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argArgumentPack">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.SqlDBMS.Deriveparameters(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            This method assigns parameter list of stored procedure to instance of command object.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argConnection">Instance of Connection object</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="T:TAP.Data.DataBase.Sqlite">
            <summary>
            This is implemted class of DBMS for SQLite
            </summary>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.#ctor(System.String,TAP.Data.DataBase.EnumConnectionMethod)">
            <summary>
            This creates an instance of this class.
            </summary>
            <param name="connectionKey">Connection key</param>
            <param name="connMethod">Method of connection</param>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.SetCommand(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method sets instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argArgumentPack">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.SetCommand(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method sets instance of Command object.
            </summary>
            <param name="argQuery">SQL</param>
            <param name="argParameterArray">Parameter list</param>
            <param name="argCommandType">Command type</param>
            <returns>Instance of Command object</returns>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.ExecuteReader(System.String,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method is not supported in this class
            </summary>
            <param name="query"></param>
            <param name="argumentPack"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.ExecuteReader(System.String,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method is not supported in this class
            </summary>
            <param name="query"></param>
            <param name="parameterArray"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.Select(System.String,System.String,System.Data.DataSet@,System.Data.IDataParameter[],System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="parameterArray">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.Select(System.String,System.String,System.Data.DataSet@,TAP.ArgumentPack,System.Data.CommandType)">
            <summary>
            This method executs user's query and returns result as instance of DataSet.
            </summary>
            <param name="query">SQL</param>
            <param name="tableName">Table name for saving result</param>
            <param name="dataSet">DataSet object for saving result tables</param>
            <param name="argumentPack">Parameter list</param>
            <param name="commandType">Command type</param>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.SetParameter(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argParameterArray">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.SetParameter(System.Data.IDbCommand,TAP.ArgumentPack)">
            <summary>
            This method assigns values to parameters.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argArgumentPack">Parameter list for Instance of Command object</param>
        </member>
        <member name="M:TAP.Data.DataBase.Sqlite.Deriveparameters(System.Data.IDbCommand,System.Data.IDbConnection)">
            <summary>
            This method assigns parameter list of stored procedure to instance of command object.
            </summary>
            <param name="argCommand">Instance of Command object</param>
            <param name="argConnection">Instance of Connection object</param>
            <returns>Instance of Command object</returns>
        </member>
    </members>
</doc>
